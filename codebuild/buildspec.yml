version: 0.2

env:
  variables:
    IMAGE_FINDING: "core/finding"
    IMAGE_IAM: "core/iam"
    IMAGE_PROJECT: "core/project"
    IMAGE_ALERT: "core/alert"
    IMAGE_REPORT: "core/report"
  parameter-store:
    GITHUB_USER: "/build/GITHUB_USER"
    GITHUB_TOKEN: "/build/GITHUB_TOKEN"

phases:
  install:
    runtime-versions:
      golang: 1.13
    commands:
      - echo "machine github.com" > ~/.netrc
      - echo "login ${GITHUB_USER}" >> ~/.netrc
      - echo "password ${GITHUB_TOKEN}" >> ~/.netrc
  pre_build:
    commands:
      - echo Setting environment variables
      - SRC=${CODEBUILD_SRC_DIR}/src
      - BUILD_OPT="--no-cache --pull"
      - TAG=v0.0.${CODEBUILD_BUILD_NUMBER}
      - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
      - REGISTORY=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
      - AWS_XRAY_SDK_DISABLED=TRUE

      - echo Testing the sources...
      - cd ${SRC}/finding && go test ./...
      - cd ${SRC}/iam     && go test ./...
      - cd ${SRC}/project && go test ./...
      - cd ${SRC}/alert   && go test ./...
      - cd ${SRC}/report  && go test ./...

      - echo Logging in to Amazon ECR...
      - $(aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION})
  build:
    commands:
      - echo Build gateway started on `date`
      - echo Pushing the Docker images...
      - cd ${SRC}/finding && docker build ${BUILD_OPT} --build-arg GITHUB_USER=${GITHUB_USER} --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} -t ${IMAGE_FINDING}:${TAG} .
      - cd ${SRC}/iam     && docker build ${BUILD_OPT} --build-arg GITHUB_USER=${GITHUB_USER} --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} -t ${IMAGE_IAM}:${TAG} .
      - cd ${SRC}/project && docker build ${BUILD_OPT} --build-arg GITHUB_USER=${GITHUB_USER} --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} -t ${IMAGE_PROJECT}:${TAG} .
      - cd ${SRC}/alert   && docker build ${BUILD_OPT} --build-arg GITHUB_USER=${GITHUB_USER} --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} -t ${IMAGE_ALERT}:${TAG} .
      - cd ${SRC}/report  && docker build ${BUILD_OPT} --build-arg GITHUB_USER=${GITHUB_USER} --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} -t ${IMAGE_REPORT}:${TAG} .

      - echo Tagging the images...
      # tag the specific version
      - docker tag ${IMAGE_FINDING}:${TAG} ${REGISTORY}/${IMAGE_FINDING}:${TAG}
      - docker tag ${IMAGE_IAM}:${TAG}     ${REGISTORY}/${IMAGE_IAM}:${TAG}
      - docker tag ${IMAGE_PROJECT}:${TAG} ${REGISTORY}/${IMAGE_PROJECT}:${TAG}
      - docker tag ${IMAGE_ALERT}:${TAG}   ${REGISTORY}/${IMAGE_ALERT}:${TAG}
      - docker tag ${IMAGE_REPORT}:${TAG}   ${REGISTORY}/${IMAGE_REPORT}:${TAG}

      # update latest version 
      - docker tag ${IMAGE_FINDING}:${TAG} ${REGISTORY}/${IMAGE_FINDING}:latest
      - docker tag ${IMAGE_IAM}:${TAG}     ${REGISTORY}/${IMAGE_IAM}:latest
      - docker tag ${IMAGE_PROJECT}:${TAG} ${REGISTORY}/${IMAGE_PROJECT}:latest
      - docker tag ${IMAGE_ALERT}:${TAG}   ${REGISTORY}/${IMAGE_ALERT}:latest
      - docker tag ${IMAGE_REPORT}:${TAG}   ${REGISTORY}/${IMAGE_REPORT}:latest
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...

      # specific version
      - docker push ${REGISTORY}/${IMAGE_FINDING}:${TAG}
      - docker push ${REGISTORY}/${IMAGE_IAM}:${TAG}
      - docker push ${REGISTORY}/${IMAGE_PROJECT}:${TAG}
      - docker push ${REGISTORY}/${IMAGE_ALERT}:${TAG}
      - docker push ${REGISTORY}/${IMAGE_REPORT}:${TAG}

      # latest version
      - docker push ${REGISTORY}/${IMAGE_FINDING}:latest
      - docker push ${REGISTORY}/${IMAGE_IAM}:latest
      - docker push ${REGISTORY}/${IMAGE_PROJECT}:latest
      - docker push ${REGISTORY}/${IMAGE_ALERT}:latest
      - docker push ${REGISTORY}/${IMAGE_REPORT}:latest
