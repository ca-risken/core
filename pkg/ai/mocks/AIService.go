// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/ca-risken/core/pkg/db"
	finding "github.com/ca-risken/core/proto/finding"

	mock "github.com/stretchr/testify/mock"

	model "github.com/ca-risken/core/pkg/model"

	protoai "github.com/ca-risken/core/proto/ai"
)

// AIService is an autogenerated mock type for the AIService type
type AIService struct {
	mock.Mock
}

// AskAISummaryFromFinding provides a mock function with given fields: ctx, f, r, lang
func (_m *AIService) AskAISummaryFromFinding(ctx context.Context, f *model.Finding, r *model.Recommend, lang string) (string, error) {
	ret := _m.Called(ctx, f, r, lang)

	if len(ret) == 0 {
		panic("no return value specified for AskAISummaryFromFinding")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Finding, *model.Recommend, string) (string, error)); ok {
		return rf(ctx, f, r, lang)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Finding, *model.Recommend, string) string); ok {
		r0 = rf(ctx, f, r, lang)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Finding, *model.Recommend, string) error); ok {
		r1 = rf(ctx, f, r, lang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AskAISummaryStreamFromFinding provides a mock function with given fields: ctx, f, r, lang, stream
func (_m *AIService) AskAISummaryStreamFromFinding(ctx context.Context, f *model.Finding, r *model.Recommend, lang string, stream finding.FindingService_GetAISummaryStreamServer) error {
	ret := _m.Called(ctx, f, r, lang, stream)

	if len(ret) == 0 {
		panic("no return value specified for AskAISummaryStreamFromFinding")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Finding, *model.Recommend, string, finding.FindingService_GetAISummaryStreamServer) error); ok {
		r0 = rf(ctx, f, r, lang, stream)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChatAI provides a mock function with given fields: ctx, req
func (_m *AIService) ChatAI(ctx context.Context, req *protoai.ChatAIRequest) (*protoai.ChatAIResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ChatAI")
	}

	var r0 *protoai.ChatAIResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protoai.ChatAIRequest) (*protoai.ChatAIResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protoai.ChatAIRequest) *protoai.ChatAIResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protoai.ChatAIResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protoai.ChatAIRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateReport provides a mock function with given fields: ctx, req, findingRepo
func (_m *AIService) GenerateReport(ctx context.Context, req *protoai.GenerateReportRequest, findingRepo db.FindingRepository) (*protoai.GenerateReportResponse, error) {
	ret := _m.Called(ctx, req, findingRepo)

	if len(ret) == 0 {
		panic("no return value specified for GenerateReport")
	}

	var r0 *protoai.GenerateReportResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protoai.GenerateReportRequest, db.FindingRepository) (*protoai.GenerateReportResponse, error)); ok {
		return rf(ctx, req, findingRepo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protoai.GenerateReportRequest, db.FindingRepository) *protoai.GenerateReportResponse); ok {
		r0 = rf(ctx, req, findingRepo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protoai.GenerateReportResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protoai.GenerateReportRequest, db.FindingRepository) error); ok {
		r1 = rf(ctx, req, findingRepo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAIService creates a new instance of AIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AIService {
	mock := &AIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
