// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/ca-risken/core/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// AIService is an autogenerated mock type for the AIService type
type AIService struct {
	mock.Mock
}

// AskAISummaryFromFinding provides a mock function with given fields: ctx, f, r, lang
func (_m *AIService) AskAISummaryFromFinding(ctx context.Context, f *model.Finding, r *model.Recommend, lang string) (string, error) {
	ret := _m.Called(ctx, f, r, lang)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *model.Finding, *model.Recommend, string) string); ok {
		r0 = rf(ctx, f, r, lang)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Finding, *model.Recommend, string) error); ok {
		r1 = rf(ctx, f, r, lang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAIService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAIService creates a new instance of AIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAIService(t mockConstructorTestingTNewAIService) *AIService {
	mock := &AIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
