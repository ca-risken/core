// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/ca-risken/core/pkg/model"
)

// OrganizationIAMRepository is an autogenerated mock type for the OrganizationIAMRepository type
type OrganizationIAMRepository struct {
	mock.Mock
}

// AttachOrganizationPolicy provides a mock function with given fields: ctx, policyID, roleID
func (_m *OrganizationIAMRepository) AttachOrganizationPolicy(ctx context.Context, policyID uint32, roleID uint32) (*model.OrganizationPolicy, error) {
	ret := _m.Called(ctx, policyID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for AttachOrganizationPolicy")
	}

	var r0 *model.OrganizationPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (*model.OrganizationPolicy, error)); ok {
		return rf(ctx, policyID, roleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) *model.OrganizationPolicy); ok {
		r0 = rf(ctx, policyID, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrganizationPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, policyID, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachOrganizationRole provides a mock function with given fields: ctx, roleID, userID
func (_m *OrganizationIAMRepository) AttachOrganizationRole(ctx context.Context, roleID uint32, userID uint32) (*model.OrganizationRole, error) {
	ret := _m.Called(ctx, roleID, userID)

	if len(ret) == 0 {
		panic("no return value specified for AttachOrganizationRole")
	}

	var r0 *model.OrganizationRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (*model.OrganizationRole, error)); ok {
		return rf(ctx, roleID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) *model.OrganizationRole); ok {
		r0 = rf(ctx, roleID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrganizationRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, roleID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganizationPolicy provides a mock function with given fields: ctx, organizationID, policyID
func (_m *OrganizationIAMRepository) DeleteOrganizationPolicy(ctx context.Context, organizationID uint32, policyID uint32) error {
	ret := _m.Called(ctx, organizationID, policyID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(ctx, organizationID, policyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOrganizationRole provides a mock function with given fields: ctx, organizationID, roleID
func (_m *OrganizationIAMRepository) DeleteOrganizationRole(ctx context.Context, organizationID uint32, roleID uint32) error {
	ret := _m.Called(ctx, organizationID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(ctx, organizationID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetachOrganizationPolicy provides a mock function with given fields: ctx, policyID, roleID
func (_m *OrganizationIAMRepository) DetachOrganizationPolicy(ctx context.Context, policyID uint32, roleID uint32) error {
	ret := _m.Called(ctx, policyID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for DetachOrganizationPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(ctx, policyID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetachOrganizationRole provides a mock function with given fields: ctx, roleID, userID
func (_m *OrganizationIAMRepository) DetachOrganizationRole(ctx context.Context, roleID uint32, userID uint32) error {
	ret := _m.Called(ctx, roleID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DetachOrganizationRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(ctx, roleID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdminOrganizationPolicy provides a mock function with given fields: ctx, userID
func (_m *OrganizationIAMRepository) GetAdminOrganizationPolicy(ctx context.Context, userID uint32) (*[]model.OrganizationPolicy, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAdminOrganizationPolicy")
	}

	var r0 *[]model.OrganizationPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (*[]model.OrganizationPolicy, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *[]model.OrganizationPolicy); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.OrganizationPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationPolicy provides a mock function with given fields: ctx, organizationID, policyID
func (_m *OrganizationIAMRepository) GetOrganizationPolicy(ctx context.Context, organizationID uint32, policyID uint32) (*model.OrganizationPolicy, error) {
	ret := _m.Called(ctx, organizationID, policyID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationPolicy")
	}

	var r0 *model.OrganizationPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (*model.OrganizationPolicy, error)); ok {
		return rf(ctx, organizationID, policyID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) *model.OrganizationPolicy); ok {
		r0 = rf(ctx, organizationID, policyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrganizationPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, organizationID, policyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationPolicyByName provides a mock function with given fields: ctx, organizationID, name
func (_m *OrganizationIAMRepository) GetOrganizationPolicyByName(ctx context.Context, organizationID uint32, name string) (*model.OrganizationPolicy, error) {
	ret := _m.Called(ctx, organizationID, name)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationPolicyByName")
	}

	var r0 *model.OrganizationPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) (*model.OrganizationPolicy, error)); ok {
		return rf(ctx, organizationID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) *model.OrganizationPolicy); ok {
		r0 = rf(ctx, organizationID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrganizationPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, string) error); ok {
		r1 = rf(ctx, organizationID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationPolicyByUserID provides a mock function with given fields: ctx, userID, organizationID
func (_m *OrganizationIAMRepository) GetOrganizationPolicyByUserID(ctx context.Context, userID uint32, organizationID uint32) (*[]model.OrganizationPolicy, error) {
	ret := _m.Called(ctx, userID, organizationID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationPolicyByUserID")
	}

	var r0 *[]model.OrganizationPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (*[]model.OrganizationPolicy, error)); ok {
		return rf(ctx, userID, organizationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) *[]model.OrganizationPolicy); ok {
		r0 = rf(ctx, userID, organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.OrganizationPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, userID, organizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationRole provides a mock function with given fields: ctx, organizationID, roleID
func (_m *OrganizationIAMRepository) GetOrganizationRole(ctx context.Context, organizationID uint32, roleID uint32) (*model.OrganizationRole, error) {
	ret := _m.Called(ctx, organizationID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationRole")
	}

	var r0 *model.OrganizationRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (*model.OrganizationRole, error)); ok {
		return rf(ctx, organizationID, roleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) *model.OrganizationRole); ok {
		r0 = rf(ctx, organizationID, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrganizationRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, organizationID, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationRoleByName provides a mock function with given fields: ctx, organizationID, name
func (_m *OrganizationIAMRepository) GetOrganizationRoleByName(ctx context.Context, organizationID uint32, name string) (*model.OrganizationRole, error) {
	ret := _m.Called(ctx, organizationID, name)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationRoleByName")
	}

	var r0 *model.OrganizationRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) (*model.OrganizationRole, error)); ok {
		return rf(ctx, organizationID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) *model.OrganizationRole); ok {
		r0 = rf(ctx, organizationID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrganizationRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, string) error); ok {
		r1 = rf(ctx, organizationID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationPolicy provides a mock function with given fields: ctx, organizationID, name, roleID
func (_m *OrganizationIAMRepository) ListOrganizationPolicy(ctx context.Context, organizationID uint32, name string, roleID uint32) ([]*model.OrganizationPolicy, error) {
	ret := _m.Called(ctx, organizationID, name, roleID)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationPolicy")
	}

	var r0 []*model.OrganizationPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string, uint32) ([]*model.OrganizationPolicy, error)); ok {
		return rf(ctx, organizationID, name, roleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string, uint32) []*model.OrganizationPolicy); ok {
		r0 = rf(ctx, organizationID, name, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrganizationPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, string, uint32) error); ok {
		r1 = rf(ctx, organizationID, name, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationRole provides a mock function with given fields: ctx, organizationID, name, userID
func (_m *OrganizationIAMRepository) ListOrganizationRole(ctx context.Context, organizationID uint32, name string, userID uint32) ([]*model.OrganizationRole, error) {
	ret := _m.Called(ctx, organizationID, name, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationRole")
	}

	var r0 []*model.OrganizationRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string, uint32) ([]*model.OrganizationRole, error)); ok {
		return rf(ctx, organizationID, name, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string, uint32) []*model.OrganizationRole); ok {
		r0 = rf(ctx, organizationID, name, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrganizationRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, string, uint32) error); ok {
		r1 = rf(ctx, organizationID, name, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutOrganizationPolicy provides a mock function with given fields: ctx, p
func (_m *OrganizationIAMRepository) PutOrganizationPolicy(ctx context.Context, p *model.OrganizationPolicy) (*model.OrganizationPolicy, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for PutOrganizationPolicy")
	}

	var r0 *model.OrganizationPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrganizationPolicy) (*model.OrganizationPolicy, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrganizationPolicy) *model.OrganizationPolicy); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrganizationPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.OrganizationPolicy) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutOrganizationRole provides a mock function with given fields: ctx, r
func (_m *OrganizationIAMRepository) PutOrganizationRole(ctx context.Context, r *model.OrganizationRole) (*model.OrganizationRole, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for PutOrganizationRole")
	}

	var r0 *model.OrganizationRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrganizationRole) (*model.OrganizationRole, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrganizationRole) *model.OrganizationRole); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrganizationRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.OrganizationRole) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrganizationIAMRepository creates a new instance of OrganizationIAMRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationIAMRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationIAMRepository {
	mock := &OrganizationIAMRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
