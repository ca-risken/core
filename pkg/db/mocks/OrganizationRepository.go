// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/ca-risken/core/pkg/model"
)

// OrganizationRepository is an autogenerated mock type for the OrganizationRepository type
type OrganizationRepository struct {
	mock.Mock
}

// CreateOrganization provides a mock function with given fields: ctx, name, description
func (_m *OrganizationRepository) CreateOrganization(ctx context.Context, name string, description string) (*model.Organization, error) {
	ret := _m.Called(ctx, name, description)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 *model.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Organization, error)); ok {
		return rf(ctx, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Organization); ok {
		r0 = rf(ctx, name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganization provides a mock function with given fields: ctx, organizationID
func (_m *OrganizationRepository) DeleteOrganization(ctx context.Context, organizationID uint32) error {
	ret := _m.Called(ctx, organizationID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, organizationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOrganizationInvitation provides a mock function with given fields: ctx, organizationID, projectID
func (_m *OrganizationRepository) DeleteOrganizationInvitation(ctx context.Context, organizationID uint32, projectID uint32) error {
	ret := _m.Called(ctx, organizationID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationInvitation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(ctx, organizationID, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListOrganization provides a mock function with given fields: ctx, organizationID, name
func (_m *OrganizationRepository) ListOrganization(ctx context.Context, organizationID uint32, name string) ([]*model.Organization, error) {
	ret := _m.Called(ctx, organizationID, name)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganization")
	}

	var r0 []*model.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) ([]*model.Organization, error)); ok {
		return rf(ctx, organizationID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) []*model.Organization); ok {
		r0 = rf(ctx, organizationID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, string) error); ok {
		r1 = rf(ctx, organizationID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationInvitation provides a mock function with given fields: ctx, organizationID, projectID
func (_m *OrganizationRepository) ListOrganizationInvitation(ctx context.Context, organizationID uint32, projectID uint32) ([]*model.OrganizationInvitation, error) {
	ret := _m.Called(ctx, organizationID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationInvitation")
	}

	var r0 []*model.OrganizationInvitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) ([]*model.OrganizationInvitation, error)); ok {
		return rf(ctx, organizationID, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) []*model.OrganizationInvitation); ok {
		r0 = rf(ctx, organizationID, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, organizationID, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjectsInOrganization provides a mock function with given fields: ctx, organizationID
func (_m *OrganizationRepository) ListProjectsInOrganization(ctx context.Context, organizationID uint32) ([]*model.Project, error) {
	ret := _m.Called(ctx, organizationID)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectsInOrganization")
	}

	var r0 []*model.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) ([]*model.Project, error)); ok {
		return rf(ctx, organizationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) []*model.Project); ok {
		r0 = rf(ctx, organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, organizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutOrganizationInvitation provides a mock function with given fields: ctx, organizationID, projectID, status
func (_m *OrganizationRepository) PutOrganizationInvitation(ctx context.Context, organizationID uint32, projectID uint32, status string) (*model.OrganizationInvitation, error) {
	ret := _m.Called(ctx, organizationID, projectID, status)

	if len(ret) == 0 {
		panic("no return value specified for PutOrganizationInvitation")
	}

	var r0 *model.OrganizationInvitation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, string) (*model.OrganizationInvitation, error)); ok {
		return rf(ctx, organizationID, projectID, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, string) *model.OrganizationInvitation); ok {
		r0 = rf(ctx, organizationID, projectID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32, string) error); ok {
		r1 = rf(ctx, organizationID, projectID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutOrganizationProject provides a mock function with given fields: ctx, organizationID, projectID
func (_m *OrganizationRepository) PutOrganizationProject(ctx context.Context, organizationID uint32, projectID uint32) (*model.OrganizationProject, error) {
	ret := _m.Called(ctx, organizationID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for PutOrganizationProject")
	}

	var r0 *model.OrganizationProject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (*model.OrganizationProject, error)); ok {
		return rf(ctx, organizationID, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) *model.OrganizationProject); ok {
		r0 = rf(ctx, organizationID, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrganizationProject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, organizationID, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveProjectsInOrganization provides a mock function with given fields: ctx, organizationID, projectID
func (_m *OrganizationRepository) RemoveProjectsInOrganization(ctx context.Context, organizationID uint32, projectID uint32) error {
	ret := _m.Called(ctx, organizationID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectsInOrganization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(ctx, organizationID, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrganization provides a mock function with given fields: ctx, organizationID, name, description
func (_m *OrganizationRepository) UpdateOrganization(ctx context.Context, organizationID uint32, name string, description string) (*model.Organization, error) {
	ret := _m.Called(ctx, organizationID, name, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganization")
	}

	var r0 *model.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string, string) (*model.Organization, error)); ok {
		return rf(ctx, organizationID, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string, string) *model.Organization); ok {
		r0 = rf(ctx, organizationID, name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, string, string) error); ok {
		r1 = rf(ctx, organizationID, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrganizationRepository creates a new instance of OrganizationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationRepository {
	mock := &OrganizationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
