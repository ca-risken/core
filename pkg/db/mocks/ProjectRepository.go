// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/ca-risken/core/pkg/db"
	mock "github.com/stretchr/testify/mock"

	model "github.com/ca-risken/core/pkg/model"
)

// ProjectRepository is an autogenerated mock type for the ProjectRepository type
type ProjectRepository struct {
	mock.Mock
}

// CleanWithNoProject provides a mock function with given fields: _a0
func (_m *ProjectRepository) CleanWithNoProject(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CleanWithNoProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProject provides a mock function with given fields: ctx, name
func (_m *ProjectRepository) CreateProject(ctx context.Context, name string) (*model.Project, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *model.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Project, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Project); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: ctx, projectID
func (_m *ProjectRepository) DeleteProject(ctx context.Context, projectID uint32) error {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListProject provides a mock function with given fields: ctx, userID, projectID, name
func (_m *ProjectRepository) ListProject(ctx context.Context, userID uint32, projectID uint32, name string) (*[]db.ProjectWithTag, error) {
	ret := _m.Called(ctx, userID, projectID, name)

	if len(ret) == 0 {
		panic("no return value specified for ListProject")
	}

	var r0 *[]db.ProjectWithTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, string) (*[]db.ProjectWithTag, error)); ok {
		return rf(ctx, userID, projectID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, string) *[]db.ProjectWithTag); ok {
		r0 = rf(ctx, userID, projectID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.ProjectWithTag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32, string) error); ok {
		r1 = rf(ctx, userID, projectID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagProject provides a mock function with given fields: ctx, projectID, tag, color
func (_m *ProjectRepository) TagProject(ctx context.Context, projectID uint32, tag string, color string) (*model.ProjectTag, error) {
	ret := _m.Called(ctx, projectID, tag, color)

	if len(ret) == 0 {
		panic("no return value specified for TagProject")
	}

	var r0 *model.ProjectTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string, string) (*model.ProjectTag, error)); ok {
		return rf(ctx, projectID, tag, color)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string, string) *model.ProjectTag); ok {
		r0 = rf(ctx, projectID, tag, color)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProjectTag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, string, string) error); ok {
		r1 = rf(ctx, projectID, tag, color)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagProject provides a mock function with given fields: ctx, projectID, tag
func (_m *ProjectRepository) UntagProject(ctx context.Context, projectID uint32, tag string) error {
	ret := _m.Called(ctx, projectID, tag)

	if len(ret) == 0 {
		panic("no return value specified for UntagProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) error); ok {
		r0 = rf(ctx, projectID, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProject provides a mock function with given fields: ctx, projectID, name
func (_m *ProjectRepository) UpdateProject(ctx context.Context, projectID uint32, name string) (*model.Project, error) {
	ret := _m.Called(ctx, projectID, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 *model.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) (*model.Project, error)); ok {
		return rf(ctx, projectID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) *model.Project); ok {
		r0 = rf(ctx, projectID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, string) error); ok {
		r1 = rf(ctx, projectID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProjectRepository creates a new instance of ProjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectRepository {
	mock := &ProjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
