syntax = "proto3";

package core.report;
option go_package = "github.com/ca-risken/core/proto/report";

import "google/protobuf/empty.proto";
import "report/entity.proto";
import "validate/validate.proto";

service ReportService {
  // report
  rpc GetReportFinding(GetReportFindingRequest)
      returns (GetReportFindingResponse);
  rpc GetReportFindingAll(GetReportFindingAllRequest)
      returns (GetReportFindingAllResponse);
  rpc CollectReportFinding(google.protobuf.Empty)
      returns (google.protobuf.Empty);
  rpc PurgeReportFinding(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc GetReport(GetReportRequest) returns (GetReportResponse);
  rpc ListReport(ListReportRequest) returns (ListReportResponse);
  rpc PutReport(PutReportRequest) returns (PutReportResponse);
}

message GetReportFindingRequest {
  uint32 project_id = 1 [ (validate.rules).uint32.gte = 1 ];
  string from_date = 2
      [ (validate.rules).string.pattern = "^(|[0-9]{4}-[0-9]{2}-[0-9]{2})$" ];
  string to_date = 3
      [ (validate.rules).string.pattern = "^(|[0-9]{4}-[0-9]{2}-[0-9]{2})$" ];
  float score = 4 [ (validate.rules).float = {gte : 0, lte : 1} ];
  repeated string data_source = 5;
}

message GetReportFindingResponse { repeated ReportFinding report_finding = 1; }

message GetReportFindingAllRequest {
  uint32 project_id = 1;
  string from_date = 2
      [ (validate.rules).string.pattern = "^(|[0-9]{4}-[0-9]{2}-[0-9]{2})$" ];
  string to_date = 3
      [ (validate.rules).string.pattern = "^(|[0-9]{4}-[0-9]{2}-[0-9]{2})$" ];
  float score = 4 [ (validate.rules).float = {gte : 0, lte : 1} ];
  repeated string data_source = 5;
}

message GetReportFindingAllResponse {
  repeated ReportFinding report_finding = 1;
}

message GetReportRequest {
  uint32 project_id = 1 [ (validate.rules).uint32.gt = 0 ]; // required
  uint32 report_id = 2 [ (validate.rules).uint32.gt = 0 ];  // required
}

message GetReportResponse { Report report = 1; }

message ListReportRequest {
  uint32 project_id = 1 [ (validate.rules).uint32.gt = 0 ];
} // required

message ListReportResponse { repeated Report report = 1; }

message PutReportRequest {
  uint32 report_id = 1;
  uint32 project_id = 2 [ (validate.rules).uint32.gt = 0 ];
  string name = 3
      [ (validate.rules).string = {min_len : 0, max_len : 200} ]; // required
  string type = 4 [ (validate.rules).string = {in : [ "Markdown", "HTML" ]} ];
  string status = 5
      [ (validate.rules).string = {in : [ "OK", "IN_PROGRESS", "ERROR" ]} ];
  string content = 6;
}

message PutReportResponse { Report report = 1; }