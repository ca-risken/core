// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: report/service.proto

package report

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetReportFindingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetReportFindingRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetProjectId() < 1 {
		return GetReportFindingRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than or equal to 1",
		}
	}

	if !_GetReportFindingRequest_FromDate_Pattern.MatchString(m.GetFromDate()) {
		return GetReportFindingRequestValidationError{
			field:  "FromDate",
			reason: "value does not match regex pattern \"^(|[0-9]{4}-[0-9]{2}-[0-9]{2})$\"",
		}
	}

	if !_GetReportFindingRequest_ToDate_Pattern.MatchString(m.GetToDate()) {
		return GetReportFindingRequestValidationError{
			field:  "ToDate",
			reason: "value does not match regex pattern \"^(|[0-9]{4}-[0-9]{2}-[0-9]{2})$\"",
		}
	}

	if val := m.GetScore(); val < 0 || val > 1 {
		return GetReportFindingRequestValidationError{
			field:  "Score",
			reason: "value must be inside range [0, 1]",
		}
	}

	return nil
}

// GetReportFindingRequestValidationError is the validation error returned by
// GetReportFindingRequest.Validate if the designated constraints aren't met.
type GetReportFindingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReportFindingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReportFindingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReportFindingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReportFindingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReportFindingRequestValidationError) ErrorName() string {
	return "GetReportFindingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReportFindingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReportFindingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReportFindingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReportFindingRequestValidationError{}

var _GetReportFindingRequest_FromDate_Pattern = regexp.MustCompile("^(|[0-9]{4}-[0-9]{2}-[0-9]{2})$")

var _GetReportFindingRequest_ToDate_Pattern = regexp.MustCompile("^(|[0-9]{4}-[0-9]{2}-[0-9]{2})$")

// Validate checks the field values on GetReportFindingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetReportFindingResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetReportFinding() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReportFindingResponseValidationError{
					field:  fmt.Sprintf("ReportFinding[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetReportFindingResponseValidationError is the validation error returned by
// GetReportFindingResponse.Validate if the designated constraints aren't met.
type GetReportFindingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReportFindingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReportFindingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReportFindingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReportFindingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReportFindingResponseValidationError) ErrorName() string {
	return "GetReportFindingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReportFindingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReportFindingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReportFindingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReportFindingResponseValidationError{}

// Validate checks the field values on GetReportFindingAllRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetReportFindingAllRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectId

	if !_GetReportFindingAllRequest_FromDate_Pattern.MatchString(m.GetFromDate()) {
		return GetReportFindingAllRequestValidationError{
			field:  "FromDate",
			reason: "value does not match regex pattern \"^(|[0-9]{4}-[0-9]{2}-[0-9]{2})$\"",
		}
	}

	if !_GetReportFindingAllRequest_ToDate_Pattern.MatchString(m.GetToDate()) {
		return GetReportFindingAllRequestValidationError{
			field:  "ToDate",
			reason: "value does not match regex pattern \"^(|[0-9]{4}-[0-9]{2}-[0-9]{2})$\"",
		}
	}

	if val := m.GetScore(); val < 0 || val > 1 {
		return GetReportFindingAllRequestValidationError{
			field:  "Score",
			reason: "value must be inside range [0, 1]",
		}
	}

	return nil
}

// GetReportFindingAllRequestValidationError is the validation error returned
// by GetReportFindingAllRequest.Validate if the designated constraints aren't met.
type GetReportFindingAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReportFindingAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReportFindingAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReportFindingAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReportFindingAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReportFindingAllRequestValidationError) ErrorName() string {
	return "GetReportFindingAllRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReportFindingAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReportFindingAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReportFindingAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReportFindingAllRequestValidationError{}

var _GetReportFindingAllRequest_FromDate_Pattern = regexp.MustCompile("^(|[0-9]{4}-[0-9]{2}-[0-9]{2})$")

var _GetReportFindingAllRequest_ToDate_Pattern = regexp.MustCompile("^(|[0-9]{4}-[0-9]{2}-[0-9]{2})$")

// Validate checks the field values on GetReportFindingAllResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetReportFindingAllResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetReportFinding() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReportFindingAllResponseValidationError{
					field:  fmt.Sprintf("ReportFinding[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetReportFindingAllResponseValidationError is the validation error returned
// by GetReportFindingAllResponse.Validate if the designated constraints
// aren't met.
type GetReportFindingAllResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReportFindingAllResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReportFindingAllResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReportFindingAllResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReportFindingAllResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReportFindingAllResponseValidationError) ErrorName() string {
	return "GetReportFindingAllResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReportFindingAllResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReportFindingAllResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReportFindingAllResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReportFindingAllResponseValidationError{}
