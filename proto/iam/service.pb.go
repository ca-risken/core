// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.3
// source: iam/service.proto

package iam

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IsAuthorizedRequest
// ユーザからのリクエストに対してアクションやリソースへの認可を行います
type IsAuthorizedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // UserID,(e.g.)111
	ProjectId    uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`         // ProjectID,(e.g.)1001
	ActionName   string `protobuf:"bytes,3,opt,name=action_name,json=actionName,proto3" json:"action_name,omitempty"`       // Service&API_name(<service_name>/<API>format),(e.g.)`finding/get-finding`
	ResourceName string `protobuf:"bytes,4,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"` // System_resource_name(<prefix>/<resouorce_name>format)
}

func (x *IsAuthorizedRequest) Reset() {
	*x = IsAuthorizedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAuthorizedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedRequest) ProtoMessage() {}

func (x *IsAuthorizedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedRequest.ProtoReflect.Descriptor instead.
func (*IsAuthorizedRequest) Descriptor() ([]byte, []int) {
	return file_iam_service_proto_rawDescGZIP(), []int{0}
}

func (x *IsAuthorizedRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *IsAuthorizedRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *IsAuthorizedRequest) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *IsAuthorizedRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type IsAuthorizedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *IsAuthorizedResponse) Reset() {
	*x = IsAuthorizedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAuthorizedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedResponse) ProtoMessage() {}

func (x *IsAuthorizedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedResponse.ProtoReflect.Descriptor instead.
func (*IsAuthorizedResponse) Descriptor() ([]byte, []int) {
	return file_iam_service_proto_rawDescGZIP(), []int{1}
}

func (x *IsAuthorizedResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

// IsAuthorizedAdminRequest
// 管理者ユーザからのリクエストに対してアクションやリソースへの認可を行います
type IsAuthorizedAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // UserID,(e.g.)111
	ActionName   string `protobuf:"bytes,2,opt,name=action_name,json=actionName,proto3" json:"action_name,omitempty"`       // Service&API_name(<service_name>/<API>format),(e.g.)`finding/get-finding`
	ResourceName string `protobuf:"bytes,3,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"` // System_resource_name(<prefix>/<resouorce_name>format)
}

func (x *IsAuthorizedAdminRequest) Reset() {
	*x = IsAuthorizedAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAuthorizedAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedAdminRequest) ProtoMessage() {}

func (x *IsAuthorizedAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedAdminRequest.ProtoReflect.Descriptor instead.
func (*IsAuthorizedAdminRequest) Descriptor() ([]byte, []int) {
	return file_iam_service_proto_rawDescGZIP(), []int{2}
}

func (x *IsAuthorizedAdminRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *IsAuthorizedAdminRequest) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *IsAuthorizedAdminRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type IsAuthorizedAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *IsAuthorizedAdminResponse) Reset() {
	*x = IsAuthorizedAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAuthorizedAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedAdminResponse) ProtoMessage() {}

func (x *IsAuthorizedAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedAdminResponse.ProtoReflect.Descriptor instead.
func (*IsAuthorizedAdminResponse) Descriptor() ([]byte, []int) {
	return file_iam_service_proto_rawDescGZIP(), []int{3}
}

func (x *IsAuthorizedAdminResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

// IsAuthorizedTokenRequest
// アクセストークンに対してアクションやリソースへの認可を行います
type IsAuthorizedTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessTokenId uint32 `protobuf:"varint,1,opt,name=access_token_id,json=accessTokenId,proto3" json:"access_token_id,omitempty"` // AccessTokenID,(e.g.)111
	ProjectId     uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`               // ProjectID,(e.g.)1001
	ActionName    string `protobuf:"bytes,3,opt,name=action_name,json=actionName,proto3" json:"action_name,omitempty"`             // Service&API_name(<service_name>/<API>format),(e.g.)`finding/get-finding`
	ResourceName  string `protobuf:"bytes,4,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`       // System_resource_name(<prefix>/<resouorce_name>format)
}

func (x *IsAuthorizedTokenRequest) Reset() {
	*x = IsAuthorizedTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAuthorizedTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedTokenRequest) ProtoMessage() {}

func (x *IsAuthorizedTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedTokenRequest.ProtoReflect.Descriptor instead.
func (*IsAuthorizedTokenRequest) Descriptor() ([]byte, []int) {
	return file_iam_service_proto_rawDescGZIP(), []int{4}
}

func (x *IsAuthorizedTokenRequest) GetAccessTokenId() uint32 {
	if x != nil {
		return x.AccessTokenId
	}
	return 0
}

func (x *IsAuthorizedTokenRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *IsAuthorizedTokenRequest) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *IsAuthorizedTokenRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type IsAuthorizedTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *IsAuthorizedTokenResponse) Reset() {
	*x = IsAuthorizedTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAuthorizedTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedTokenResponse) ProtoMessage() {}

func (x *IsAuthorizedTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedTokenResponse.ProtoReflect.Descriptor instead.
func (*IsAuthorizedTokenResponse) Descriptor() ([]byte, []int) {
	return file_iam_service_proto_rawDescGZIP(), []int{5}
}

func (x *IsAuthorizedTokenResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

// IsAdminRequest
// 特定プロジェクトに依存しない管理者権限を持っているかどうかを返します
type IsAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *IsAdminRequest) Reset() {
	*x = IsAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAdminRequest) ProtoMessage() {}

func (x *IsAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAdminRequest.ProtoReflect.Descriptor instead.
func (*IsAdminRequest) Descriptor() ([]byte, []int) {
	return file_iam_service_proto_rawDescGZIP(), []int{6}
}

func (x *IsAdminRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type IsAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *IsAdminResponse) Reset() {
	*x = IsAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAdminResponse) ProtoMessage() {}

func (x *IsAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAdminResponse.ProtoReflect.Descriptor instead.
func (*IsAdminResponse) Descriptor() ([]byte, []int) {
	return file_iam_service_proto_rawDescGZIP(), []int{7}
}

func (x *IsAdminResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

var File_iam_service_proto protoreflect.FileDescriptor

var file_iam_service_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x61, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x69, 0x61, 0x6d, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x69, 0x61, 0x6d, 0x2f,
	0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x69, 0x61, 0x6d, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x69, 0x61,
	0x6d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69, 0x61, 0x6d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01,
	0x0a, 0x13, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x79, 0x0a, 0x18, 0x49,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x19, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x6f, 0x6b, 0x22, 0xa7, 0x01, 0x0a, 0x18, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a,
	0x19, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x29, 0x0a, 0x0e, 0x49, 0x73,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x0f, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x32, 0xb7, 0x12, 0x0a, 0x0a, 0x49, 0x41, 0x4d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x50, 0x75,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x50, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x50, 0x75, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x20, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x19,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x50, 0x75, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63,
	0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x50, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x50, 0x75, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x50, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x4d, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63,
	0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e,
	0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53,
	0x0a, 0x0e, 0x50, 0x75, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x50, 0x75, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x50, 0x75, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x68, 0x0a, 0x15, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x26, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x15, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x16, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x59, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f,
	0x50, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12,
	0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x50, 0x75, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x50, 0x75, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0c, 0x49, 0x73, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x22, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x18, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x61, 0x2d, 0x72, 0x69, 0x73, 0x6b, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_iam_service_proto_rawDescOnce sync.Once
	file_iam_service_proto_rawDescData = file_iam_service_proto_rawDesc
)

func file_iam_service_proto_rawDescGZIP() []byte {
	file_iam_service_proto_rawDescOnce.Do(func() {
		file_iam_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_iam_service_proto_rawDescData)
	})
	return file_iam_service_proto_rawDescData
}

var file_iam_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_iam_service_proto_goTypes = []interface{}{
	(*IsAuthorizedRequest)(nil),             // 0: core.iam.IsAuthorizedRequest
	(*IsAuthorizedResponse)(nil),            // 1: core.iam.IsAuthorizedResponse
	(*IsAuthorizedAdminRequest)(nil),        // 2: core.iam.IsAuthorizedAdminRequest
	(*IsAuthorizedAdminResponse)(nil),       // 3: core.iam.IsAuthorizedAdminResponse
	(*IsAuthorizedTokenRequest)(nil),        // 4: core.iam.IsAuthorizedTokenRequest
	(*IsAuthorizedTokenResponse)(nil),       // 5: core.iam.IsAuthorizedTokenResponse
	(*IsAdminRequest)(nil),                  // 6: core.iam.IsAdminRequest
	(*IsAdminResponse)(nil),                 // 7: core.iam.IsAdminResponse
	(*ListUserRequest)(nil),                 // 8: core.iam.ListUserRequest
	(*GetUserRequest)(nil),                  // 9: core.iam.GetUserRequest
	(*PutUserRequest)(nil),                  // 10: core.iam.PutUserRequest
	(*UpdateUserAdminRequest)(nil),          // 11: core.iam.UpdateUserAdminRequest
	(*ListRoleRequest)(nil),                 // 12: core.iam.ListRoleRequest
	(*GetRoleRequest)(nil),                  // 13: core.iam.GetRoleRequest
	(*PutRoleRequest)(nil),                  // 14: core.iam.PutRoleRequest
	(*DeleteRoleRequest)(nil),               // 15: core.iam.DeleteRoleRequest
	(*AttachRoleRequest)(nil),               // 16: core.iam.AttachRoleRequest
	(*DetachRoleRequest)(nil),               // 17: core.iam.DetachRoleRequest
	(*ListPolicyRequest)(nil),               // 18: core.iam.ListPolicyRequest
	(*GetPolicyRequest)(nil),                // 19: core.iam.GetPolicyRequest
	(*PutPolicyRequest)(nil),                // 20: core.iam.PutPolicyRequest
	(*DeletePolicyRequest)(nil),             // 21: core.iam.DeletePolicyRequest
	(*AttachPolicyRequest)(nil),             // 22: core.iam.AttachPolicyRequest
	(*DetachPolicyRequest)(nil),             // 23: core.iam.DetachPolicyRequest
	(*ListAccessTokenRequest)(nil),          // 24: core.iam.ListAccessTokenRequest
	(*AuthenticateAccessTokenRequest)(nil),  // 25: core.iam.AuthenticateAccessTokenRequest
	(*PutAccessTokenRequest)(nil),           // 26: core.iam.PutAccessTokenRequest
	(*DeleteAccessTokenRequest)(nil),        // 27: core.iam.DeleteAccessTokenRequest
	(*AttachAccessTokenRoleRequest)(nil),    // 28: core.iam.AttachAccessTokenRoleRequest
	(*DetachAccessTokenRoleRequest)(nil),    // 29: core.iam.DetachAccessTokenRoleRequest
	(*emptypb.Empty)(nil),                   // 30: google.protobuf.Empty
	(*ListUserReservedRequest)(nil),         // 31: core.iam.ListUserReservedRequest
	(*PutUserReservedRequest)(nil),          // 32: core.iam.PutUserReservedRequest
	(*DeleteUserReservedRequest)(nil),       // 33: core.iam.DeleteUserReservedRequest
	(*ListUserResponse)(nil),                // 34: core.iam.ListUserResponse
	(*GetUserResponse)(nil),                 // 35: core.iam.GetUserResponse
	(*PutUserResponse)(nil),                 // 36: core.iam.PutUserResponse
	(*UpdateUserAdminResponse)(nil),         // 37: core.iam.UpdateUserAdminResponse
	(*ListRoleResponse)(nil),                // 38: core.iam.ListRoleResponse
	(*GetRoleResponse)(nil),                 // 39: core.iam.GetRoleResponse
	(*PutRoleResponse)(nil),                 // 40: core.iam.PutRoleResponse
	(*AttachRoleResponse)(nil),              // 41: core.iam.AttachRoleResponse
	(*ListPolicyResponse)(nil),              // 42: core.iam.ListPolicyResponse
	(*GetPolicyResponse)(nil),               // 43: core.iam.GetPolicyResponse
	(*PutPolicyResponse)(nil),               // 44: core.iam.PutPolicyResponse
	(*AttachPolicyResponse)(nil),            // 45: core.iam.AttachPolicyResponse
	(*ListAccessTokenResponse)(nil),         // 46: core.iam.ListAccessTokenResponse
	(*AuthenticateAccessTokenResponse)(nil), // 47: core.iam.AuthenticateAccessTokenResponse
	(*PutAccessTokenResponse)(nil),          // 48: core.iam.PutAccessTokenResponse
	(*AttachAccessTokenRoleResponse)(nil),   // 49: core.iam.AttachAccessTokenRoleResponse
	(*ListUserReservedResponse)(nil),        // 50: core.iam.ListUserReservedResponse
	(*PutUserReservedResponse)(nil),         // 51: core.iam.PutUserReservedResponse
}
var file_iam_service_proto_depIdxs = []int32{
	8,  // 0: core.iam.IAMService.ListUser:input_type -> core.iam.ListUserRequest
	9,  // 1: core.iam.IAMService.GetUser:input_type -> core.iam.GetUserRequest
	10, // 2: core.iam.IAMService.PutUser:input_type -> core.iam.PutUserRequest
	11, // 3: core.iam.IAMService.UpdateUserAdmin:input_type -> core.iam.UpdateUserAdminRequest
	12, // 4: core.iam.IAMService.ListRole:input_type -> core.iam.ListRoleRequest
	13, // 5: core.iam.IAMService.GetRole:input_type -> core.iam.GetRoleRequest
	14, // 6: core.iam.IAMService.PutRole:input_type -> core.iam.PutRoleRequest
	15, // 7: core.iam.IAMService.DeleteRole:input_type -> core.iam.DeleteRoleRequest
	16, // 8: core.iam.IAMService.AttachRole:input_type -> core.iam.AttachRoleRequest
	17, // 9: core.iam.IAMService.DetachRole:input_type -> core.iam.DetachRoleRequest
	18, // 10: core.iam.IAMService.ListPolicy:input_type -> core.iam.ListPolicyRequest
	19, // 11: core.iam.IAMService.GetPolicy:input_type -> core.iam.GetPolicyRequest
	20, // 12: core.iam.IAMService.PutPolicy:input_type -> core.iam.PutPolicyRequest
	21, // 13: core.iam.IAMService.DeletePolicy:input_type -> core.iam.DeletePolicyRequest
	22, // 14: core.iam.IAMService.AttachPolicy:input_type -> core.iam.AttachPolicyRequest
	23, // 15: core.iam.IAMService.DetachPolicy:input_type -> core.iam.DetachPolicyRequest
	24, // 16: core.iam.IAMService.ListAccessToken:input_type -> core.iam.ListAccessTokenRequest
	25, // 17: core.iam.IAMService.AuthenticateAccessToken:input_type -> core.iam.AuthenticateAccessTokenRequest
	26, // 18: core.iam.IAMService.PutAccessToken:input_type -> core.iam.PutAccessTokenRequest
	27, // 19: core.iam.IAMService.DeleteAccessToken:input_type -> core.iam.DeleteAccessTokenRequest
	28, // 20: core.iam.IAMService.AttachAccessTokenRole:input_type -> core.iam.AttachAccessTokenRoleRequest
	29, // 21: core.iam.IAMService.DetachAccessTokenRole:input_type -> core.iam.DetachAccessTokenRoleRequest
	30, // 22: core.iam.IAMService.AnalyzeTokenExpiration:input_type -> google.protobuf.Empty
	31, // 23: core.iam.IAMService.ListUserReserved:input_type -> core.iam.ListUserReservedRequest
	32, // 24: core.iam.IAMService.PutUserReserved:input_type -> core.iam.PutUserReservedRequest
	33, // 25: core.iam.IAMService.DeleteUserReserved:input_type -> core.iam.DeleteUserReservedRequest
	0,  // 26: core.iam.IAMService.IsAuthorized:input_type -> core.iam.IsAuthorizedRequest
	2,  // 27: core.iam.IAMService.IsAuthorizedAdmin:input_type -> core.iam.IsAuthorizedAdminRequest
	4,  // 28: core.iam.IAMService.IsAuthorizedToken:input_type -> core.iam.IsAuthorizedTokenRequest
	6,  // 29: core.iam.IAMService.IsAdmin:input_type -> core.iam.IsAdminRequest
	34, // 30: core.iam.IAMService.ListUser:output_type -> core.iam.ListUserResponse
	35, // 31: core.iam.IAMService.GetUser:output_type -> core.iam.GetUserResponse
	36, // 32: core.iam.IAMService.PutUser:output_type -> core.iam.PutUserResponse
	37, // 33: core.iam.IAMService.UpdateUserAdmin:output_type -> core.iam.UpdateUserAdminResponse
	38, // 34: core.iam.IAMService.ListRole:output_type -> core.iam.ListRoleResponse
	39, // 35: core.iam.IAMService.GetRole:output_type -> core.iam.GetRoleResponse
	40, // 36: core.iam.IAMService.PutRole:output_type -> core.iam.PutRoleResponse
	30, // 37: core.iam.IAMService.DeleteRole:output_type -> google.protobuf.Empty
	41, // 38: core.iam.IAMService.AttachRole:output_type -> core.iam.AttachRoleResponse
	30, // 39: core.iam.IAMService.DetachRole:output_type -> google.protobuf.Empty
	42, // 40: core.iam.IAMService.ListPolicy:output_type -> core.iam.ListPolicyResponse
	43, // 41: core.iam.IAMService.GetPolicy:output_type -> core.iam.GetPolicyResponse
	44, // 42: core.iam.IAMService.PutPolicy:output_type -> core.iam.PutPolicyResponse
	30, // 43: core.iam.IAMService.DeletePolicy:output_type -> google.protobuf.Empty
	45, // 44: core.iam.IAMService.AttachPolicy:output_type -> core.iam.AttachPolicyResponse
	30, // 45: core.iam.IAMService.DetachPolicy:output_type -> google.protobuf.Empty
	46, // 46: core.iam.IAMService.ListAccessToken:output_type -> core.iam.ListAccessTokenResponse
	47, // 47: core.iam.IAMService.AuthenticateAccessToken:output_type -> core.iam.AuthenticateAccessTokenResponse
	48, // 48: core.iam.IAMService.PutAccessToken:output_type -> core.iam.PutAccessTokenResponse
	30, // 49: core.iam.IAMService.DeleteAccessToken:output_type -> google.protobuf.Empty
	49, // 50: core.iam.IAMService.AttachAccessTokenRole:output_type -> core.iam.AttachAccessTokenRoleResponse
	30, // 51: core.iam.IAMService.DetachAccessTokenRole:output_type -> google.protobuf.Empty
	30, // 52: core.iam.IAMService.AnalyzeTokenExpiration:output_type -> google.protobuf.Empty
	50, // 53: core.iam.IAMService.ListUserReserved:output_type -> core.iam.ListUserReservedResponse
	51, // 54: core.iam.IAMService.PutUserReserved:output_type -> core.iam.PutUserReservedResponse
	30, // 55: core.iam.IAMService.DeleteUserReserved:output_type -> google.protobuf.Empty
	1,  // 56: core.iam.IAMService.IsAuthorized:output_type -> core.iam.IsAuthorizedResponse
	3,  // 57: core.iam.IAMService.IsAuthorizedAdmin:output_type -> core.iam.IsAuthorizedAdminResponse
	5,  // 58: core.iam.IAMService.IsAuthorizedToken:output_type -> core.iam.IsAuthorizedTokenResponse
	7,  // 59: core.iam.IAMService.IsAdmin:output_type -> core.iam.IsAdminResponse
	30, // [30:60] is the sub-list for method output_type
	0,  // [0:30] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_iam_service_proto_init() }
func file_iam_service_proto_init() {
	if File_iam_service_proto != nil {
		return
	}
	file_iam_user_proto_init()
	file_iam_role_proto_init()
	file_iam_policy_proto_init()
	file_iam_access_token_proto_init()
	file_iam_user_reserved_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_iam_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAuthorizedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAuthorizedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAuthorizedAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAuthorizedAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAuthorizedTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAuthorizedTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iam_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_iam_service_proto_goTypes,
		DependencyIndexes: file_iam_service_proto_depIdxs,
		MessageInfos:      file_iam_service_proto_msgTypes,
	}.Build()
	File_iam_service_proto = out.File
	file_iam_service_proto_rawDesc = nil
	file_iam_service_proto_goTypes = nil
	file_iam_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IAMServiceClient is the client API for IAMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IAMServiceClient interface {
	// User
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	PutUser(ctx context.Context, in *PutUserRequest, opts ...grpc.CallOption) (*PutUserResponse, error)
	UpdateUserAdmin(ctx context.Context, in *UpdateUserAdminRequest, opts ...grpc.CallOption) (*UpdateUserAdminResponse, error)
	// Role
	ListRole(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ListRoleResponse, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	PutRole(ctx context.Context, in *PutRoleRequest, opts ...grpc.CallOption) (*PutRoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AttachRole(ctx context.Context, in *AttachRoleRequest, opts ...grpc.CallOption) (*AttachRoleResponse, error)
	DetachRole(ctx context.Context, in *DetachRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Policy
	ListPolicy(ctx context.Context, in *ListPolicyRequest, opts ...grpc.CallOption) (*ListPolicyResponse, error)
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	PutPolicy(ctx context.Context, in *PutPolicyRequest, opts ...grpc.CallOption) (*PutPolicyResponse, error)
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AttachPolicy(ctx context.Context, in *AttachPolicyRequest, opts ...grpc.CallOption) (*AttachPolicyResponse, error)
	DetachPolicy(ctx context.Context, in *DetachPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// AccessToken
	ListAccessToken(ctx context.Context, in *ListAccessTokenRequest, opts ...grpc.CallOption) (*ListAccessTokenResponse, error)
	AuthenticateAccessToken(ctx context.Context, in *AuthenticateAccessTokenRequest, opts ...grpc.CallOption) (*AuthenticateAccessTokenResponse, error)
	PutAccessToken(ctx context.Context, in *PutAccessTokenRequest, opts ...grpc.CallOption) (*PutAccessTokenResponse, error)
	DeleteAccessToken(ctx context.Context, in *DeleteAccessTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AttachAccessTokenRole(ctx context.Context, in *AttachAccessTokenRoleRequest, opts ...grpc.CallOption) (*AttachAccessTokenRoleResponse, error)
	DetachAccessTokenRole(ctx context.Context, in *DetachAccessTokenRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AnalyzeTokenExpiration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UserReserved
	ListUserReserved(ctx context.Context, in *ListUserReservedRequest, opts ...grpc.CallOption) (*ListUserReservedResponse, error)
	PutUserReserved(ctx context.Context, in *PutUserReservedRequest, opts ...grpc.CallOption) (*PutUserReservedResponse, error)
	DeleteUserReserved(ctx context.Context, in *DeleteUserReservedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ユーザに対しての認可を行います
	IsAuthorized(ctx context.Context, in *IsAuthorizedRequest, opts ...grpc.CallOption) (*IsAuthorizedResponse, error)
	// 管理者ユーザに対しての認可を行います
	IsAuthorizedAdmin(ctx context.Context, in *IsAuthorizedAdminRequest, opts ...grpc.CallOption) (*IsAuthorizedAdminResponse, error)
	// アクセストークンに対しての認可を行います
	IsAuthorizedToken(ctx context.Context, in *IsAuthorizedTokenRequest, opts ...grpc.CallOption) (*IsAuthorizedTokenResponse, error)
	// 特定プロジェクトに依存しない管理者権限を持っているかどうかを返します
	IsAdmin(ctx context.Context, in *IsAdminRequest, opts ...grpc.CallOption) (*IsAdminResponse, error)
}

type iAMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMServiceClient(cc grpc.ClientConnInterface) IAMServiceClient {
	return &iAMServiceClient{cc}
}

func (c *iAMServiceClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) PutUser(ctx context.Context, in *PutUserRequest, opts ...grpc.CallOption) (*PutUserResponse, error) {
	out := new(PutUserResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/PutUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) UpdateUserAdmin(ctx context.Context, in *UpdateUserAdminRequest, opts ...grpc.CallOption) (*UpdateUserAdminResponse, error) {
	out := new(UpdateUserAdminResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/UpdateUserAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ListRole(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ListRoleResponse, error) {
	out := new(ListRoleResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/ListRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) PutRole(ctx context.Context, in *PutRoleRequest, opts ...grpc.CallOption) (*PutRoleResponse, error) {
	out := new(PutRoleResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/PutRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) AttachRole(ctx context.Context, in *AttachRoleRequest, opts ...grpc.CallOption) (*AttachRoleResponse, error) {
	out := new(AttachRoleResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/AttachRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DetachRole(ctx context.Context, in *DetachRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/DetachRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ListPolicy(ctx context.Context, in *ListPolicyRequest, opts ...grpc.CallOption) (*ListPolicyResponse, error) {
	out := new(ListPolicyResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/ListPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) PutPolicy(ctx context.Context, in *PutPolicyRequest, opts ...grpc.CallOption) (*PutPolicyResponse, error) {
	out := new(PutPolicyResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/PutPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) AttachPolicy(ctx context.Context, in *AttachPolicyRequest, opts ...grpc.CallOption) (*AttachPolicyResponse, error) {
	out := new(AttachPolicyResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/AttachPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DetachPolicy(ctx context.Context, in *DetachPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/DetachPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ListAccessToken(ctx context.Context, in *ListAccessTokenRequest, opts ...grpc.CallOption) (*ListAccessTokenResponse, error) {
	out := new(ListAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/ListAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) AuthenticateAccessToken(ctx context.Context, in *AuthenticateAccessTokenRequest, opts ...grpc.CallOption) (*AuthenticateAccessTokenResponse, error) {
	out := new(AuthenticateAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/AuthenticateAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) PutAccessToken(ctx context.Context, in *PutAccessTokenRequest, opts ...grpc.CallOption) (*PutAccessTokenResponse, error) {
	out := new(PutAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/PutAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DeleteAccessToken(ctx context.Context, in *DeleteAccessTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/DeleteAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) AttachAccessTokenRole(ctx context.Context, in *AttachAccessTokenRoleRequest, opts ...grpc.CallOption) (*AttachAccessTokenRoleResponse, error) {
	out := new(AttachAccessTokenRoleResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/AttachAccessTokenRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DetachAccessTokenRole(ctx context.Context, in *DetachAccessTokenRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/DetachAccessTokenRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) AnalyzeTokenExpiration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/AnalyzeTokenExpiration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ListUserReserved(ctx context.Context, in *ListUserReservedRequest, opts ...grpc.CallOption) (*ListUserReservedResponse, error) {
	out := new(ListUserReservedResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/ListUserReserved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) PutUserReserved(ctx context.Context, in *PutUserReservedRequest, opts ...grpc.CallOption) (*PutUserReservedResponse, error) {
	out := new(PutUserReservedResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/PutUserReserved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DeleteUserReserved(ctx context.Context, in *DeleteUserReservedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/DeleteUserReserved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) IsAuthorized(ctx context.Context, in *IsAuthorizedRequest, opts ...grpc.CallOption) (*IsAuthorizedResponse, error) {
	out := new(IsAuthorizedResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/IsAuthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) IsAuthorizedAdmin(ctx context.Context, in *IsAuthorizedAdminRequest, opts ...grpc.CallOption) (*IsAuthorizedAdminResponse, error) {
	out := new(IsAuthorizedAdminResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/IsAuthorizedAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) IsAuthorizedToken(ctx context.Context, in *IsAuthorizedTokenRequest, opts ...grpc.CallOption) (*IsAuthorizedTokenResponse, error) {
	out := new(IsAuthorizedTokenResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/IsAuthorizedToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) IsAdmin(ctx context.Context, in *IsAdminRequest, opts ...grpc.CallOption) (*IsAdminResponse, error) {
	out := new(IsAdminResponse)
	err := c.cc.Invoke(ctx, "/core.iam.IAMService/IsAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMServiceServer is the server API for IAMService service.
type IAMServiceServer interface {
	// User
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	PutUser(context.Context, *PutUserRequest) (*PutUserResponse, error)
	UpdateUserAdmin(context.Context, *UpdateUserAdminRequest) (*UpdateUserAdminResponse, error)
	// Role
	ListRole(context.Context, *ListRoleRequest) (*ListRoleResponse, error)
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	PutRole(context.Context, *PutRoleRequest) (*PutRoleResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
	AttachRole(context.Context, *AttachRoleRequest) (*AttachRoleResponse, error)
	DetachRole(context.Context, *DetachRoleRequest) (*emptypb.Empty, error)
	// Policy
	ListPolicy(context.Context, *ListPolicyRequest) (*ListPolicyResponse, error)
	GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error)
	PutPolicy(context.Context, *PutPolicyRequest) (*PutPolicyResponse, error)
	DeletePolicy(context.Context, *DeletePolicyRequest) (*emptypb.Empty, error)
	AttachPolicy(context.Context, *AttachPolicyRequest) (*AttachPolicyResponse, error)
	DetachPolicy(context.Context, *DetachPolicyRequest) (*emptypb.Empty, error)
	// AccessToken
	ListAccessToken(context.Context, *ListAccessTokenRequest) (*ListAccessTokenResponse, error)
	AuthenticateAccessToken(context.Context, *AuthenticateAccessTokenRequest) (*AuthenticateAccessTokenResponse, error)
	PutAccessToken(context.Context, *PutAccessTokenRequest) (*PutAccessTokenResponse, error)
	DeleteAccessToken(context.Context, *DeleteAccessTokenRequest) (*emptypb.Empty, error)
	AttachAccessTokenRole(context.Context, *AttachAccessTokenRoleRequest) (*AttachAccessTokenRoleResponse, error)
	DetachAccessTokenRole(context.Context, *DetachAccessTokenRoleRequest) (*emptypb.Empty, error)
	AnalyzeTokenExpiration(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// UserReserved
	ListUserReserved(context.Context, *ListUserReservedRequest) (*ListUserReservedResponse, error)
	PutUserReserved(context.Context, *PutUserReservedRequest) (*PutUserReservedResponse, error)
	DeleteUserReserved(context.Context, *DeleteUserReservedRequest) (*emptypb.Empty, error)
	// ユーザに対しての認可を行います
	IsAuthorized(context.Context, *IsAuthorizedRequest) (*IsAuthorizedResponse, error)
	// 管理者ユーザに対しての認可を行います
	IsAuthorizedAdmin(context.Context, *IsAuthorizedAdminRequest) (*IsAuthorizedAdminResponse, error)
	// アクセストークンに対しての認可を行います
	IsAuthorizedToken(context.Context, *IsAuthorizedTokenRequest) (*IsAuthorizedTokenResponse, error)
	// 特定プロジェクトに依存しない管理者権限を持っているかどうかを返します
	IsAdmin(context.Context, *IsAdminRequest) (*IsAdminResponse, error)
}

// UnimplementedIAMServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIAMServiceServer struct {
}

func (*UnimplementedIAMServiceServer) ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (*UnimplementedIAMServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedIAMServiceServer) PutUser(context.Context, *PutUserRequest) (*PutUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUser not implemented")
}
func (*UnimplementedIAMServiceServer) UpdateUserAdmin(context.Context, *UpdateUserAdminRequest) (*UpdateUserAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAdmin not implemented")
}
func (*UnimplementedIAMServiceServer) ListRole(context.Context, *ListRoleRequest) (*ListRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRole not implemented")
}
func (*UnimplementedIAMServiceServer) GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedIAMServiceServer) PutRole(context.Context, *PutRoleRequest) (*PutRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRole not implemented")
}
func (*UnimplementedIAMServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedIAMServiceServer) AttachRole(context.Context, *AttachRoleRequest) (*AttachRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachRole not implemented")
}
func (*UnimplementedIAMServiceServer) DetachRole(context.Context, *DetachRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachRole not implemented")
}
func (*UnimplementedIAMServiceServer) ListPolicy(context.Context, *ListPolicyRequest) (*ListPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicy not implemented")
}
func (*UnimplementedIAMServiceServer) GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (*UnimplementedIAMServiceServer) PutPolicy(context.Context, *PutPolicyRequest) (*PutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPolicy not implemented")
}
func (*UnimplementedIAMServiceServer) DeletePolicy(context.Context, *DeletePolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (*UnimplementedIAMServiceServer) AttachPolicy(context.Context, *AttachPolicyRequest) (*AttachPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachPolicy not implemented")
}
func (*UnimplementedIAMServiceServer) DetachPolicy(context.Context, *DetachPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachPolicy not implemented")
}
func (*UnimplementedIAMServiceServer) ListAccessToken(context.Context, *ListAccessTokenRequest) (*ListAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessToken not implemented")
}
func (*UnimplementedIAMServiceServer) AuthenticateAccessToken(context.Context, *AuthenticateAccessTokenRequest) (*AuthenticateAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateAccessToken not implemented")
}
func (*UnimplementedIAMServiceServer) PutAccessToken(context.Context, *PutAccessTokenRequest) (*PutAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAccessToken not implemented")
}
func (*UnimplementedIAMServiceServer) DeleteAccessToken(context.Context, *DeleteAccessTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessToken not implemented")
}
func (*UnimplementedIAMServiceServer) AttachAccessTokenRole(context.Context, *AttachAccessTokenRoleRequest) (*AttachAccessTokenRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachAccessTokenRole not implemented")
}
func (*UnimplementedIAMServiceServer) DetachAccessTokenRole(context.Context, *DetachAccessTokenRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachAccessTokenRole not implemented")
}
func (*UnimplementedIAMServiceServer) AnalyzeTokenExpiration(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeTokenExpiration not implemented")
}
func (*UnimplementedIAMServiceServer) ListUserReserved(context.Context, *ListUserReservedRequest) (*ListUserReservedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserReserved not implemented")
}
func (*UnimplementedIAMServiceServer) PutUserReserved(context.Context, *PutUserReservedRequest) (*PutUserReservedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserReserved not implemented")
}
func (*UnimplementedIAMServiceServer) DeleteUserReserved(context.Context, *DeleteUserReservedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserReserved not implemented")
}
func (*UnimplementedIAMServiceServer) IsAuthorized(context.Context, *IsAuthorizedRequest) (*IsAuthorizedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthorized not implemented")
}
func (*UnimplementedIAMServiceServer) IsAuthorizedAdmin(context.Context, *IsAuthorizedAdminRequest) (*IsAuthorizedAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthorizedAdmin not implemented")
}
func (*UnimplementedIAMServiceServer) IsAuthorizedToken(context.Context, *IsAuthorizedTokenRequest) (*IsAuthorizedTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthorizedToken not implemented")
}
func (*UnimplementedIAMServiceServer) IsAdmin(context.Context, *IsAdminRequest) (*IsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAdmin not implemented")
}

func RegisterIAMServiceServer(s *grpc.Server, srv IAMServiceServer) {
	s.RegisterService(&_IAMService_serviceDesc, srv)
}

func _IAMService_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_PutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).PutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/PutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).PutUser(ctx, req.(*PutUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_UpdateUserAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).UpdateUserAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/UpdateUserAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).UpdateUserAdmin(ctx, req.(*UpdateUserAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ListRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ListRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/ListRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ListRole(ctx, req.(*ListRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_PutRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).PutRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/PutRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).PutRole(ctx, req.(*PutRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_AttachRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).AttachRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/AttachRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).AttachRole(ctx, req.(*AttachRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DetachRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DetachRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/DetachRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DetachRole(ctx, req.(*DetachRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ListPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ListPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/ListPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ListPolicy(ctx, req.(*ListPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_PutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).PutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/PutPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).PutPolicy(ctx, req.(*PutPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DeletePolicy(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_AttachPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).AttachPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/AttachPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).AttachPolicy(ctx, req.(*AttachPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DetachPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DetachPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/DetachPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DetachPolicy(ctx, req.(*DetachPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ListAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ListAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/ListAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ListAccessToken(ctx, req.(*ListAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_AuthenticateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).AuthenticateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/AuthenticateAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).AuthenticateAccessToken(ctx, req.(*AuthenticateAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_PutAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).PutAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/PutAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).PutAccessToken(ctx, req.(*PutAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DeleteAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DeleteAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/DeleteAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DeleteAccessToken(ctx, req.(*DeleteAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_AttachAccessTokenRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachAccessTokenRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).AttachAccessTokenRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/AttachAccessTokenRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).AttachAccessTokenRole(ctx, req.(*AttachAccessTokenRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DetachAccessTokenRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachAccessTokenRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DetachAccessTokenRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/DetachAccessTokenRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DetachAccessTokenRole(ctx, req.(*DetachAccessTokenRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_AnalyzeTokenExpiration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).AnalyzeTokenExpiration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/AnalyzeTokenExpiration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).AnalyzeTokenExpiration(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ListUserReserved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserReservedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ListUserReserved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/ListUserReserved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ListUserReserved(ctx, req.(*ListUserReservedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_PutUserReserved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUserReservedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).PutUserReserved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/PutUserReserved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).PutUserReserved(ctx, req.(*PutUserReservedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DeleteUserReserved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReservedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DeleteUserReserved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/DeleteUserReserved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DeleteUserReserved(ctx, req.(*DeleteUserReservedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_IsAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAuthorizedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).IsAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/IsAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).IsAuthorized(ctx, req.(*IsAuthorizedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_IsAuthorizedAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAuthorizedAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).IsAuthorizedAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/IsAuthorizedAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).IsAuthorizedAdmin(ctx, req.(*IsAuthorizedAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_IsAuthorizedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAuthorizedTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).IsAuthorizedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/IsAuthorizedToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).IsAuthorizedToken(ctx, req.(*IsAuthorizedTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_IsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).IsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.iam.IAMService/IsAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).IsAdmin(ctx, req.(*IsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IAMService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.iam.IAMService",
	HandlerType: (*IAMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUser",
			Handler:    _IAMService_ListUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _IAMService_GetUser_Handler,
		},
		{
			MethodName: "PutUser",
			Handler:    _IAMService_PutUser_Handler,
		},
		{
			MethodName: "UpdateUserAdmin",
			Handler:    _IAMService_UpdateUserAdmin_Handler,
		},
		{
			MethodName: "ListRole",
			Handler:    _IAMService_ListRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _IAMService_GetRole_Handler,
		},
		{
			MethodName: "PutRole",
			Handler:    _IAMService_PutRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _IAMService_DeleteRole_Handler,
		},
		{
			MethodName: "AttachRole",
			Handler:    _IAMService_AttachRole_Handler,
		},
		{
			MethodName: "DetachRole",
			Handler:    _IAMService_DetachRole_Handler,
		},
		{
			MethodName: "ListPolicy",
			Handler:    _IAMService_ListPolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _IAMService_GetPolicy_Handler,
		},
		{
			MethodName: "PutPolicy",
			Handler:    _IAMService_PutPolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _IAMService_DeletePolicy_Handler,
		},
		{
			MethodName: "AttachPolicy",
			Handler:    _IAMService_AttachPolicy_Handler,
		},
		{
			MethodName: "DetachPolicy",
			Handler:    _IAMService_DetachPolicy_Handler,
		},
		{
			MethodName: "ListAccessToken",
			Handler:    _IAMService_ListAccessToken_Handler,
		},
		{
			MethodName: "AuthenticateAccessToken",
			Handler:    _IAMService_AuthenticateAccessToken_Handler,
		},
		{
			MethodName: "PutAccessToken",
			Handler:    _IAMService_PutAccessToken_Handler,
		},
		{
			MethodName: "DeleteAccessToken",
			Handler:    _IAMService_DeleteAccessToken_Handler,
		},
		{
			MethodName: "AttachAccessTokenRole",
			Handler:    _IAMService_AttachAccessTokenRole_Handler,
		},
		{
			MethodName: "DetachAccessTokenRole",
			Handler:    _IAMService_DetachAccessTokenRole_Handler,
		},
		{
			MethodName: "AnalyzeTokenExpiration",
			Handler:    _IAMService_AnalyzeTokenExpiration_Handler,
		},
		{
			MethodName: "ListUserReserved",
			Handler:    _IAMService_ListUserReserved_Handler,
		},
		{
			MethodName: "PutUserReserved",
			Handler:    _IAMService_PutUserReserved_Handler,
		},
		{
			MethodName: "DeleteUserReserved",
			Handler:    _IAMService_DeleteUserReserved_Handler,
		},
		{
			MethodName: "IsAuthorized",
			Handler:    _IAMService_IsAuthorized_Handler,
		},
		{
			MethodName: "IsAuthorizedAdmin",
			Handler:    _IAMService_IsAuthorizedAdmin_Handler,
		},
		{
			MethodName: "IsAuthorizedToken",
			Handler:    _IAMService_IsAuthorizedToken_Handler,
		},
		{
			MethodName: "IsAdmin",
			Handler:    _IAMService_IsAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam/service.proto",
}
