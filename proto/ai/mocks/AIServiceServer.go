// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	ai "github.com/ca-risken/core/proto/ai"

	mock "github.com/stretchr/testify/mock"
)

// AIServiceServer is an autogenerated mock type for the AIServiceServer type
type AIServiceServer struct {
	mock.Mock
}

// ChatAI provides a mock function with given fields: _a0, _a1
func (_m *AIServiceServer) ChatAI(_a0 context.Context, _a1 *ai.ChatAIRequest) (*ai.ChatAIResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ChatAI")
	}

	var r0 *ai.ChatAIResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ai.ChatAIRequest) (*ai.ChatAIResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ai.ChatAIRequest) *ai.ChatAIResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ai.ChatAIResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ai.ChatAIRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAIServiceServer creates a new instance of AIServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAIServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AIServiceServer {
	mock := &AIServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
