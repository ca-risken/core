// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.9
// source: finding/entity.proto

package finding

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FindingStatus
type FindingStatus int32

const (
	FindingStatus_FINDING_UNKNOWN FindingStatus = 0
	FindingStatus_FINDING_ACTIVE  FindingStatus = 1
	FindingStatus_FINDING_PENDING FindingStatus = 2
)

// Enum value maps for FindingStatus.
var (
	FindingStatus_name = map[int32]string{
		0: "FINDING_UNKNOWN",
		1: "FINDING_ACTIVE",
		2: "FINDING_PENDING",
	}
	FindingStatus_value = map[string]int32{
		"FINDING_UNKNOWN": 0,
		"FINDING_ACTIVE":  1,
		"FINDING_PENDING": 2,
	}
)

func (x FindingStatus) Enum() *FindingStatus {
	p := new(FindingStatus)
	*p = x
	return p
}

func (x FindingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FindingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_finding_entity_proto_enumTypes[0].Descriptor()
}

func (FindingStatus) Type() protoreflect.EnumType {
	return &file_finding_entity_proto_enumTypes[0]
}

func (x FindingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FindingStatus.Descriptor instead.
func (FindingStatus) EnumDescriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{0}
}

// FindingSettingStatus
type FindingSettingStatus int32

const (
	FindingSettingStatus_SETTING_UNKNOWN  FindingSettingStatus = 0
	FindingSettingStatus_SETTING_ACTIVE   FindingSettingStatus = 1
	FindingSettingStatus_SETTING_DEACTIVE FindingSettingStatus = 2
)

// Enum value maps for FindingSettingStatus.
var (
	FindingSettingStatus_name = map[int32]string{
		0: "SETTING_UNKNOWN",
		1: "SETTING_ACTIVE",
		2: "SETTING_DEACTIVE",
	}
	FindingSettingStatus_value = map[string]int32{
		"SETTING_UNKNOWN":  0,
		"SETTING_ACTIVE":   1,
		"SETTING_DEACTIVE": 2,
	}
)

func (x FindingSettingStatus) Enum() *FindingSettingStatus {
	p := new(FindingSettingStatus)
	*p = x
	return p
}

func (x FindingSettingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FindingSettingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_finding_entity_proto_enumTypes[1].Descriptor()
}

func (FindingSettingStatus) Type() protoreflect.EnumType {
	return &file_finding_entity_proto_enumTypes[1]
}

func (x FindingSettingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FindingSettingStatus.Descriptor instead.
func (FindingSettingStatus) EnumDescriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{1}
}

// Finding
type Finding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FindingId        uint64  `protobuf:"varint,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty"`
	Description      string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DataSource       string  `protobuf:"bytes,3,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	DataSourceId     string  `protobuf:"bytes,4,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	ResourceName     string  `protobuf:"bytes,5,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ProjectId        uint32  `protobuf:"varint,6,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OriginalScore    float32 `protobuf:"fixed32,7,opt,name=original_score,json=originalScore,proto3" json:"original_score,omitempty"`
	OriginalMaxScore float32 `protobuf:"fixed32,8,opt,name=original_max_score,json=originalMaxScore,proto3" json:"original_max_score,omitempty"`
	Score            float32 `protobuf:"fixed32,9,opt,name=score,proto3" json:"score,omitempty"`
	Data             string  `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
	CreatedAt        int64   `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64   `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Finding) Reset() {
	*x = Finding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Finding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finding) ProtoMessage() {}

func (x *Finding) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finding.ProtoReflect.Descriptor instead.
func (*Finding) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{0}
}

func (x *Finding) GetFindingId() uint64 {
	if x != nil {
		return x.FindingId
	}
	return 0
}

func (x *Finding) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Finding) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *Finding) GetDataSourceId() string {
	if x != nil {
		return x.DataSourceId
	}
	return ""
}

func (x *Finding) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *Finding) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Finding) GetOriginalScore() float32 {
	if x != nil {
		return x.OriginalScore
	}
	return 0
}

func (x *Finding) GetOriginalMaxScore() float32 {
	if x != nil {
		return x.OriginalMaxScore
	}
	return 0
}

func (x *Finding) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Finding) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Finding) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Finding) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// Finding For Upsert
// (Unique keys: project_id, data_source, data_source_id)
type FindingForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description      string  `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	DataSource       string  `protobuf:"bytes,2,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	DataSourceId     string  `protobuf:"bytes,3,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	ResourceName     string  `protobuf:"bytes,4,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ProjectId        uint32  `protobuf:"varint,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OriginalScore    float32 `protobuf:"fixed32,6,opt,name=original_score,json=originalScore,proto3" json:"original_score,omitempty"`
	OriginalMaxScore float32 `protobuf:"fixed32,7,opt,name=original_max_score,json=originalMaxScore,proto3" json:"original_max_score,omitempty"`
	Data             string  `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FindingForUpsert) Reset() {
	*x = FindingForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindingForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindingForUpsert) ProtoMessage() {}

func (x *FindingForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindingForUpsert.ProtoReflect.Descriptor instead.
func (*FindingForUpsert) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{1}
}

func (x *FindingForUpsert) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FindingForUpsert) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *FindingForUpsert) GetDataSourceId() string {
	if x != nil {
		return x.DataSourceId
	}
	return ""
}

func (x *FindingForUpsert) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *FindingForUpsert) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *FindingForUpsert) GetOriginalScore() float32 {
	if x != nil {
		return x.OriginalScore
	}
	return 0
}

func (x *FindingForUpsert) GetOriginalMaxScore() float32 {
	if x != nil {
		return x.OriginalMaxScore
	}
	return 0
}

func (x *FindingForUpsert) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type FindingBatchForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Finding   *FindingForUpsert     `protobuf:"bytes,1,opt,name=finding,proto3" json:"finding,omitempty"`
	Recommend *RecommendForBatch    `protobuf:"bytes,2,opt,name=recommend,proto3" json:"recommend,omitempty"`
	Tag       []*FindingTagForBatch `protobuf:"bytes,3,rep,name=tag,proto3" json:"tag,omitempty"`
}

func (x *FindingBatchForUpsert) Reset() {
	*x = FindingBatchForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindingBatchForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindingBatchForUpsert) ProtoMessage() {}

func (x *FindingBatchForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindingBatchForUpsert.ProtoReflect.Descriptor instead.
func (*FindingBatchForUpsert) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{2}
}

func (x *FindingBatchForUpsert) GetFinding() *FindingForUpsert {
	if x != nil {
		return x.Finding
	}
	return nil
}

func (x *FindingBatchForUpsert) GetRecommend() *RecommendForBatch {
	if x != nil {
		return x.Recommend
	}
	return nil
}

func (x *FindingBatchForUpsert) GetTag() []*FindingTagForBatch {
	if x != nil {
		return x.Tag
	}
	return nil
}

// FindingTag
type FindingTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FindingTagId uint64 `protobuf:"varint,1,opt,name=finding_tag_id,json=findingTagId,proto3" json:"finding_tag_id,omitempty"`
	FindingId    uint64 `protobuf:"varint,2,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty"`
	ProjectId    uint32 `protobuf:"varint,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Tag          string `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	CreatedAt    int64  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    int64  `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *FindingTag) Reset() {
	*x = FindingTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindingTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindingTag) ProtoMessage() {}

func (x *FindingTag) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindingTag.ProtoReflect.Descriptor instead.
func (*FindingTag) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{3}
}

func (x *FindingTag) GetFindingTagId() uint64 {
	if x != nil {
		return x.FindingTagId
	}
	return 0
}

func (x *FindingTag) GetFindingId() uint64 {
	if x != nil {
		return x.FindingId
	}
	return 0
}

func (x *FindingTag) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *FindingTag) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *FindingTag) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FindingTag) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// FindingTag For Upsert
// (Unique keys: finding_id, tag_key)
type FindingTagForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FindingId uint64 `protobuf:"varint,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty"`
	ProjectId uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Tag       string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *FindingTagForUpsert) Reset() {
	*x = FindingTagForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindingTagForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindingTagForUpsert) ProtoMessage() {}

func (x *FindingTagForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindingTagForUpsert.ProtoReflect.Descriptor instead.
func (*FindingTagForUpsert) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{4}
}

func (x *FindingTagForUpsert) GetFindingId() uint64 {
	if x != nil {
		return x.FindingId
	}
	return 0
}

func (x *FindingTagForUpsert) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *FindingTagForUpsert) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// Resource
type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId   uint64 `protobuf:"varint,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ResourceName string `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ProjectId    uint32 `protobuf:"varint,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CreatedAt    int64  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    int64  `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{5}
}

func (x *Resource) GetResourceId() uint64 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

func (x *Resource) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *Resource) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Resource) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Resource) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// Resource For upsert
// (Unique keys: project_id, resource_name)
type ResourceForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ProjectId    uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ResourceForUpsert) Reset() {
	*x = ResourceForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceForUpsert) ProtoMessage() {}

func (x *ResourceForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceForUpsert.ProtoReflect.Descriptor instead.
func (*ResourceForUpsert) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{6}
}

func (x *ResourceForUpsert) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ResourceForUpsert) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// ResourceBatchForUpsert
type ResourceBatchForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource *ResourceForUpsert     `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Tag      []*ResourceTagForBatch `protobuf:"bytes,2,rep,name=tag,proto3" json:"tag,omitempty"`
}

func (x *ResourceBatchForUpsert) Reset() {
	*x = ResourceBatchForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceBatchForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceBatchForUpsert) ProtoMessage() {}

func (x *ResourceBatchForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceBatchForUpsert.ProtoReflect.Descriptor instead.
func (*ResourceBatchForUpsert) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{7}
}

func (x *ResourceBatchForUpsert) GetResource() *ResourceForUpsert {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ResourceBatchForUpsert) GetTag() []*ResourceTagForBatch {
	if x != nil {
		return x.Tag
	}
	return nil
}

// ResourceTag
type ResourceTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceTagId uint64 `protobuf:"varint,1,opt,name=resource_tag_id,json=resourceTagId,proto3" json:"resource_tag_id,omitempty"`
	ResourceId    uint64 `protobuf:"varint,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ProjectId     uint32 `protobuf:"varint,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Tag           string `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	CreatedAt     int64  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     int64  `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ResourceTag) Reset() {
	*x = ResourceTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTag) ProtoMessage() {}

func (x *ResourceTag) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTag.ProtoReflect.Descriptor instead.
func (*ResourceTag) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{8}
}

func (x *ResourceTag) GetResourceTagId() uint64 {
	if x != nil {
		return x.ResourceTagId
	}
	return 0
}

func (x *ResourceTag) GetResourceId() uint64 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

func (x *ResourceTag) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ResourceTag) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ResourceTag) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ResourceTag) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// ResourceTag For upsert
// (Unique keys: resource_id, tag_key)
type ResourceTagForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId uint64 `protobuf:"varint,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ProjectId  uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Tag        string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *ResourceTagForUpsert) Reset() {
	*x = ResourceTagForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceTagForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTagForUpsert) ProtoMessage() {}

func (x *ResourceTagForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTagForUpsert.ProtoReflect.Descriptor instead.
func (*ResourceTagForUpsert) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{9}
}

func (x *ResourceTagForUpsert) GetResourceId() uint64 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

func (x *ResourceTagForUpsert) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ResourceTagForUpsert) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// PendFinding
type PendFinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FindingId uint64 `protobuf:"varint,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty"`
	ProjectId uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Note      string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	CreatedAt int64  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64  `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PendFinding) Reset() {
	*x = PendFinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendFinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendFinding) ProtoMessage() {}

func (x *PendFinding) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendFinding.ProtoReflect.Descriptor instead.
func (*PendFinding) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{10}
}

func (x *PendFinding) GetFindingId() uint64 {
	if x != nil {
		return x.FindingId
	}
	return 0
}

func (x *PendFinding) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PendFinding) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *PendFinding) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PendFinding) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// PendFinding For upsert
type PendFindingForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FindingId uint64 `protobuf:"varint,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty"`
	ProjectId uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Note      string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *PendFindingForUpsert) Reset() {
	*x = PendFindingForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendFindingForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendFindingForUpsert) ProtoMessage() {}

func (x *PendFindingForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendFindingForUpsert.ProtoReflect.Descriptor instead.
func (*PendFindingForUpsert) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{11}
}

func (x *PendFindingForUpsert) GetFindingId() uint64 {
	if x != nil {
		return x.FindingId
	}
	return 0
}

func (x *PendFindingForUpsert) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PendFindingForUpsert) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

// FindingSetting
type FindingSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FindingSettingId uint32               `protobuf:"varint,1,opt,name=finding_setting_id,json=findingSettingId,proto3" json:"finding_setting_id,omitempty"`
	ProjectId        uint32               `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ResourceName     string               `protobuf:"bytes,3,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	Setting          string               `protobuf:"bytes,4,opt,name=setting,proto3" json:"setting,omitempty"`
	Status           FindingSettingStatus `protobuf:"varint,5,opt,name=status,proto3,enum=core.finding.FindingSettingStatus" json:"status,omitempty"`
	CreatedAt        int64                `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64                `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *FindingSetting) Reset() {
	*x = FindingSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindingSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindingSetting) ProtoMessage() {}

func (x *FindingSetting) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindingSetting.ProtoReflect.Descriptor instead.
func (*FindingSetting) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{12}
}

func (x *FindingSetting) GetFindingSettingId() uint32 {
	if x != nil {
		return x.FindingSettingId
	}
	return 0
}

func (x *FindingSetting) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *FindingSetting) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *FindingSetting) GetSetting() string {
	if x != nil {
		return x.Setting
	}
	return ""
}

func (x *FindingSetting) GetStatus() FindingSettingStatus {
	if x != nil {
		return x.Status
	}
	return FindingSettingStatus_SETTING_UNKNOWN
}

func (x *FindingSetting) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FindingSetting) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// FindingSettingForUpsert
type FindingSettingForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint32               `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ResourceName string               `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	Setting      string               `protobuf:"bytes,3,opt,name=setting,proto3" json:"setting,omitempty"`
	Status       FindingSettingStatus `protobuf:"varint,4,opt,name=status,proto3,enum=core.finding.FindingSettingStatus" json:"status,omitempty"`
}

func (x *FindingSettingForUpsert) Reset() {
	*x = FindingSettingForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindingSettingForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindingSettingForUpsert) ProtoMessage() {}

func (x *FindingSettingForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindingSettingForUpsert.ProtoReflect.Descriptor instead.
func (*FindingSettingForUpsert) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{13}
}

func (x *FindingSettingForUpsert) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *FindingSettingForUpsert) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *FindingSettingForUpsert) GetSetting() string {
	if x != nil {
		return x.Setting
	}
	return ""
}

func (x *FindingSettingForUpsert) GetStatus() FindingSettingStatus {
	if x != nil {
		return x.Status
	}
	return FindingSettingStatus_SETTING_UNKNOWN
}

// Recommend
type Recommend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FindingId      uint64 `protobuf:"varint,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty"`
	RecommendId    uint32 `protobuf:"varint,2,opt,name=recommend_id,json=recommendId,proto3" json:"recommend_id,omitempty"`
	DataSource     string `protobuf:"bytes,3,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	Type           string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Risk           string `protobuf:"bytes,5,opt,name=risk,proto3" json:"risk,omitempty"`
	Recommendation string `protobuf:"bytes,6,opt,name=recommendation,proto3" json:"recommendation,omitempty"`
	CreatedAt      int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      int64  `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Recommend) Reset() {
	*x = Recommend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recommend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recommend) ProtoMessage() {}

func (x *Recommend) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recommend.ProtoReflect.Descriptor instead.
func (*Recommend) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{14}
}

func (x *Recommend) GetFindingId() uint64 {
	if x != nil {
		return x.FindingId
	}
	return 0
}

func (x *Recommend) GetRecommendId() uint32 {
	if x != nil {
		return x.RecommendId
	}
	return 0
}

func (x *Recommend) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *Recommend) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Recommend) GetRisk() string {
	if x != nil {
		return x.Risk
	}
	return ""
}

func (x *Recommend) GetRecommendation() string {
	if x != nil {
		return x.Recommendation
	}
	return ""
}

func (x *Recommend) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Recommend) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// RecommendForBatch
type RecommendForBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Risk           string `protobuf:"bytes,2,opt,name=risk,proto3" json:"risk,omitempty"`
	Recommendation string `protobuf:"bytes,3,opt,name=recommendation,proto3" json:"recommendation,omitempty"`
}

func (x *RecommendForBatch) Reset() {
	*x = RecommendForBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendForBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendForBatch) ProtoMessage() {}

func (x *RecommendForBatch) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendForBatch.ProtoReflect.Descriptor instead.
func (*RecommendForBatch) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{15}
}

func (x *RecommendForBatch) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RecommendForBatch) GetRisk() string {
	if x != nil {
		return x.Risk
	}
	return ""
}

func (x *RecommendForBatch) GetRecommendation() string {
	if x != nil {
		return x.Recommendation
	}
	return ""
}

// FindingTagForBatch
type FindingTagForBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *FindingTagForBatch) Reset() {
	*x = FindingTagForBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindingTagForBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindingTagForBatch) ProtoMessage() {}

func (x *FindingTagForBatch) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindingTagForBatch.ProtoReflect.Descriptor instead.
func (*FindingTagForBatch) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{16}
}

func (x *FindingTagForBatch) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// ResourceTagForBatch
type ResourceTagForBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *ResourceTagForBatch) Reset() {
	*x = ResourceTagForBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_finding_entity_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceTagForBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTagForBatch) ProtoMessage() {}

func (x *ResourceTagForBatch) ProtoReflect() protoreflect.Message {
	mi := &file_finding_entity_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTagForBatch.ProtoReflect.Descriptor instead.
func (*ResourceTagForBatch) Descriptor() ([]byte, []int) {
	return file_finding_entity_proto_rawDescGZIP(), []int{17}
}

func (x *ResourceTagForBatch) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

var File_finding_entity_proto protoreflect.FileDescriptor

var file_finding_entity_proto_rawDesc = []byte{
	0x0a, 0x14, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x66, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x22, 0x92, 0x03, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa8, 0x02, 0x0a, 0x10, 0x46, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xc4, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x38,
	0x0a, 0x07, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x07, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x66, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x46, 0x6f,
	0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xc0, 0x01, 0x0a, 0x0a,
	0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x65,
	0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x46, 0x6f, 0x72, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xad, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x57, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x8a,
	0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x67, 0x46, 0x6f,
	0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xc5, 0x01, 0x0a, 0x0b,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x68, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x61, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x9d, 0x01,
	0x0a, 0x0b, 0x50, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x68, 0x0a,
	0x14, 0x50, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x66, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xb3, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x69, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x63, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x69,
	0x73, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x12, 0x46, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x22, 0x27, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x2a, 0x4d, 0x0a, 0x0d, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f,
	0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x55, 0x0a, 0x14, 0x46, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x02, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x61, 0x2d, 0x72, 0x69, 0x73, 0x6b, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_finding_entity_proto_rawDescOnce sync.Once
	file_finding_entity_proto_rawDescData = file_finding_entity_proto_rawDesc
)

func file_finding_entity_proto_rawDescGZIP() []byte {
	file_finding_entity_proto_rawDescOnce.Do(func() {
		file_finding_entity_proto_rawDescData = protoimpl.X.CompressGZIP(file_finding_entity_proto_rawDescData)
	})
	return file_finding_entity_proto_rawDescData
}

var file_finding_entity_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_finding_entity_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_finding_entity_proto_goTypes = []interface{}{
	(FindingStatus)(0),              // 0: core.finding.FindingStatus
	(FindingSettingStatus)(0),       // 1: core.finding.FindingSettingStatus
	(*Finding)(nil),                 // 2: core.finding.Finding
	(*FindingForUpsert)(nil),        // 3: core.finding.FindingForUpsert
	(*FindingBatchForUpsert)(nil),   // 4: core.finding.FindingBatchForUpsert
	(*FindingTag)(nil),              // 5: core.finding.FindingTag
	(*FindingTagForUpsert)(nil),     // 6: core.finding.FindingTagForUpsert
	(*Resource)(nil),                // 7: core.finding.Resource
	(*ResourceForUpsert)(nil),       // 8: core.finding.ResourceForUpsert
	(*ResourceBatchForUpsert)(nil),  // 9: core.finding.ResourceBatchForUpsert
	(*ResourceTag)(nil),             // 10: core.finding.ResourceTag
	(*ResourceTagForUpsert)(nil),    // 11: core.finding.ResourceTagForUpsert
	(*PendFinding)(nil),             // 12: core.finding.PendFinding
	(*PendFindingForUpsert)(nil),    // 13: core.finding.PendFindingForUpsert
	(*FindingSetting)(nil),          // 14: core.finding.FindingSetting
	(*FindingSettingForUpsert)(nil), // 15: core.finding.FindingSettingForUpsert
	(*Recommend)(nil),               // 16: core.finding.Recommend
	(*RecommendForBatch)(nil),       // 17: core.finding.RecommendForBatch
	(*FindingTagForBatch)(nil),      // 18: core.finding.FindingTagForBatch
	(*ResourceTagForBatch)(nil),     // 19: core.finding.ResourceTagForBatch
}
var file_finding_entity_proto_depIdxs = []int32{
	3,  // 0: core.finding.FindingBatchForUpsert.finding:type_name -> core.finding.FindingForUpsert
	17, // 1: core.finding.FindingBatchForUpsert.recommend:type_name -> core.finding.RecommendForBatch
	18, // 2: core.finding.FindingBatchForUpsert.tag:type_name -> core.finding.FindingTagForBatch
	8,  // 3: core.finding.ResourceBatchForUpsert.resource:type_name -> core.finding.ResourceForUpsert
	19, // 4: core.finding.ResourceBatchForUpsert.tag:type_name -> core.finding.ResourceTagForBatch
	1,  // 5: core.finding.FindingSetting.status:type_name -> core.finding.FindingSettingStatus
	1,  // 6: core.finding.FindingSettingForUpsert.status:type_name -> core.finding.FindingSettingStatus
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_finding_entity_proto_init() }
func file_finding_entity_proto_init() {
	if File_finding_entity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_finding_entity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Finding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindingForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindingBatchForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindingTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindingTagForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceBatchForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceTagForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendFinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendFindingForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindingSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindingSettingForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recommend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendForBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindingTagForBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_finding_entity_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceTagForBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_finding_entity_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_finding_entity_proto_goTypes,
		DependencyIndexes: file_finding_entity_proto_depIdxs,
		EnumInfos:         file_finding_entity_proto_enumTypes,
		MessageInfos:      file_finding_entity_proto_msgTypes,
	}.Build()
	File_finding_entity_proto = out.File
	file_finding_entity_proto_rawDesc = nil
	file_finding_entity_proto_goTypes = nil
	file_finding_entity_proto_depIdxs = nil
}
