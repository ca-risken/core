// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	finding "github.com/ca-risken/core/proto/finding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"
)

// FindingServiceServer is an autogenerated mock type for the FindingServiceServer type
type FindingServiceServer struct {
	mock.Mock
}

// BatchListFinding provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) BatchListFinding(_a0 context.Context, _a1 *finding.BatchListFindingRequest) (*finding.BatchListFindingResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.BatchListFindingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.BatchListFindingRequest) *finding.BatchListFindingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.BatchListFindingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.BatchListFindingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClearScore provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) ClearScore(_a0 context.Context, _a1 *finding.ClearScoreRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *finding.ClearScoreRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.ClearScoreRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFinding provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) DeleteFinding(_a0 context.Context, _a1 *finding.DeleteFindingRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *finding.DeleteFindingRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.DeleteFindingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFindingSetting provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) DeleteFindingSetting(_a0 context.Context, _a1 *finding.DeleteFindingSettingRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *finding.DeleteFindingSettingRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.DeleteFindingSettingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePendFinding provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) DeletePendFinding(_a0 context.Context, _a1 *finding.DeletePendFindingRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *finding.DeletePendFindingRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.DeletePendFindingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResource provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) DeleteResource(_a0 context.Context, _a1 *finding.DeleteResourceRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *finding.DeleteResourceRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.DeleteResourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFinding provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) GetFinding(_a0 context.Context, _a1 *finding.GetFindingRequest) (*finding.GetFindingResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.GetFindingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.GetFindingRequest) *finding.GetFindingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.GetFindingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.GetFindingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFindingSetting provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) GetFindingSetting(_a0 context.Context, _a1 *finding.GetFindingSettingRequest) (*finding.GetFindingSettingResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.GetFindingSettingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.GetFindingSettingRequest) *finding.GetFindingSettingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.GetFindingSettingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.GetFindingSettingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendFinding provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) GetPendFinding(_a0 context.Context, _a1 *finding.GetPendFindingRequest) (*finding.GetPendFindingResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.GetPendFindingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.GetPendFindingRequest) *finding.GetPendFindingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.GetPendFindingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.GetPendFindingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommend provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) GetRecommend(_a0 context.Context, _a1 *finding.GetRecommendRequest) (*finding.GetRecommendResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.GetRecommendResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.GetRecommendRequest) *finding.GetRecommendResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.GetRecommendResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.GetRecommendRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResource provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) GetResource(_a0 context.Context, _a1 *finding.GetResourceRequest) (*finding.GetResourceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.GetResourceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.GetResourceRequest) *finding.GetResourceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.GetResourceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.GetResourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFinding provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) ListFinding(_a0 context.Context, _a1 *finding.ListFindingRequest) (*finding.ListFindingResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.ListFindingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.ListFindingRequest) *finding.ListFindingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.ListFindingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.ListFindingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFindingSetting provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) ListFindingSetting(_a0 context.Context, _a1 *finding.ListFindingSettingRequest) (*finding.ListFindingSettingResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.ListFindingSettingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.ListFindingSettingRequest) *finding.ListFindingSettingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.ListFindingSettingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.ListFindingSettingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFindingTag provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) ListFindingTag(_a0 context.Context, _a1 *finding.ListFindingTagRequest) (*finding.ListFindingTagResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.ListFindingTagResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.ListFindingTagRequest) *finding.ListFindingTagResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.ListFindingTagResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.ListFindingTagRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFindingTagName provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) ListFindingTagName(_a0 context.Context, _a1 *finding.ListFindingTagNameRequest) (*finding.ListFindingTagNameResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.ListFindingTagNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.ListFindingTagNameRequest) *finding.ListFindingTagNameResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.ListFindingTagNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.ListFindingTagNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResource provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) ListResource(_a0 context.Context, _a1 *finding.ListResourceRequest) (*finding.ListResourceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.ListResourceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.ListResourceRequest) *finding.ListResourceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.ListResourceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.ListResourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceTag provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) ListResourceTag(_a0 context.Context, _a1 *finding.ListResourceTagRequest) (*finding.ListResourceTagResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.ListResourceTagResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.ListResourceTagRequest) *finding.ListResourceTagResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.ListResourceTagResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.ListResourceTagRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceTagName provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) ListResourceTagName(_a0 context.Context, _a1 *finding.ListResourceTagNameRequest) (*finding.ListResourceTagNameResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.ListResourceTagNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.ListResourceTagNameRequest) *finding.ListResourceTagNameResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.ListResourceTagNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.ListResourceTagNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutFinding provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) PutFinding(_a0 context.Context, _a1 *finding.PutFindingRequest) (*finding.PutFindingResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.PutFindingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.PutFindingRequest) *finding.PutFindingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.PutFindingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.PutFindingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutFindingBatch provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) PutFindingBatch(_a0 context.Context, _a1 *finding.PutFindingBatchRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *finding.PutFindingBatchRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.PutFindingBatchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutFindingSetting provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) PutFindingSetting(_a0 context.Context, _a1 *finding.PutFindingSettingRequest) (*finding.PutFindingSettingResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.PutFindingSettingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.PutFindingSettingRequest) *finding.PutFindingSettingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.PutFindingSettingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.PutFindingSettingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPendFinding provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) PutPendFinding(_a0 context.Context, _a1 *finding.PutPendFindingRequest) (*finding.PutPendFindingResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.PutPendFindingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.PutPendFindingRequest) *finding.PutPendFindingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.PutPendFindingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.PutPendFindingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRecommend provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) PutRecommend(_a0 context.Context, _a1 *finding.PutRecommendRequest) (*finding.PutRecommendResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.PutRecommendResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.PutRecommendRequest) *finding.PutRecommendResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.PutRecommendResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.PutRecommendRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutResource provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) PutResource(_a0 context.Context, _a1 *finding.PutResourceRequest) (*finding.PutResourceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.PutResourceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.PutResourceRequest) *finding.PutResourceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.PutResourceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.PutResourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutResourceBatch provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) PutResourceBatch(_a0 context.Context, _a1 *finding.PutResourceBatchRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *finding.PutResourceBatchRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.PutResourceBatchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagFinding provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) TagFinding(_a0 context.Context, _a1 *finding.TagFindingRequest) (*finding.TagFindingResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.TagFindingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.TagFindingRequest) *finding.TagFindingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.TagFindingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.TagFindingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) TagResource(_a0 context.Context, _a1 *finding.TagResourceRequest) (*finding.TagResourceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *finding.TagResourceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *finding.TagResourceRequest) *finding.TagResourceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finding.TagResourceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.TagResourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagFinding provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) UntagFinding(_a0 context.Context, _a1 *finding.UntagFindingRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *finding.UntagFindingRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.UntagFindingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0, _a1
func (_m *FindingServiceServer) UntagResource(_a0 context.Context, _a1 *finding.UntagResourceRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *finding.UntagResourceRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *finding.UntagResourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
