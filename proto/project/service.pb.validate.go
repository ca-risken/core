// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: project/service.proto

package project

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for ProjectId

	if utf8.RuneCountInString(m.GetName()) > 64 {
		return ListProjectRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 64 runes",
		}
	}

	return nil
}

// ListProjectRequestValidationError is the validation error returned by
// ListProjectRequest.Validate if the designated constraints aren't met.
type ListProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectRequestValidationError) ErrorName() string {
	return "ListProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectRequestValidationError{}

// Validate checks the field values on ListProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProject() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectResponseValidationError{
					field:  fmt.Sprintf("Project[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProjectResponseValidationError is the validation error returned by
// ListProjectResponse.Validate if the designated constraints aren't met.
type ListProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectResponseValidationError) ErrorName() string {
	return "ListProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectResponseValidationError{}

// Validate checks the field values on CreateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return CreateProjectRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		return CreateProjectRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	return nil
}

// CreateProjectRequestValidationError is the validation error returned by
// CreateProjectRequest.Validate if the designated constraints aren't met.
type CreateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectRequestValidationError) ErrorName() string {
	return "CreateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectRequestValidationError{}

// Validate checks the field values on CreateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateProjectResponseValidationError is the validation error returned by
// CreateProjectResponse.Validate if the designated constraints aren't met.
type CreateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectResponseValidationError) ErrorName() string {
	return "CreateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectResponseValidationError{}

// Validate checks the field values on UpdateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetProjectId() <= 0 {
		return UpdateProjectRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		return UpdateProjectRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	return nil
}

// UpdateProjectRequestValidationError is the validation error returned by
// UpdateProjectRequest.Validate if the designated constraints aren't met.
type UpdateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectRequestValidationError) ErrorName() string {
	return "UpdateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectRequestValidationError{}

// Validate checks the field values on UpdateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateProjectResponseValidationError is the validation error returned by
// UpdateProjectResponse.Validate if the designated constraints aren't met.
type UpdateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectResponseValidationError) ErrorName() string {
	return "UpdateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectResponseValidationError{}

// Validate checks the field values on DeleteProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetProjectId() <= 0 {
		return DeleteProjectRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DeleteProjectRequestValidationError is the validation error returned by
// DeleteProjectRequest.Validate if the designated constraints aren't met.
type DeleteProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectRequestValidationError) ErrorName() string {
	return "DeleteProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectRequestValidationError{}

// Validate checks the field values on TagProjectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TagProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetProjectId() <= 0 {
		return TagProjectRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetTag()); l < 1 || l > 64 {
		return TagProjectRequestValidationError{
			field:  "Tag",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	return nil
}

// TagProjectRequestValidationError is the validation error returned by
// TagProjectRequest.Validate if the designated constraints aren't met.
type TagProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagProjectRequestValidationError) ErrorName() string {
	return "TagProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TagProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTagProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagProjectRequestValidationError{}

// Validate checks the field values on TagProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TagProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TagProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TagProjectResponseValidationError is the validation error returned by
// TagProjectResponse.Validate if the designated constraints aren't met.
type TagProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagProjectResponseValidationError) ErrorName() string {
	return "TagProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TagProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTagProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagProjectResponseValidationError{}

// Validate checks the field values on UntagProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UntagProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetProjectId() <= 0 {
		return UntagProjectRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetTag()); l < 1 || l > 64 {
		return UntagProjectRequestValidationError{
			field:  "Tag",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
	}

	return nil
}

// UntagProjectRequestValidationError is the validation error returned by
// UntagProjectRequest.Validate if the designated constraints aren't met.
type UntagProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UntagProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UntagProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UntagProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UntagProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UntagProjectRequestValidationError) ErrorName() string {
	return "UntagProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UntagProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUntagProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UntagProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UntagProjectRequestValidationError{}
