// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: organization/service.proto

package organization

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationRequestMultiError, or nil if none found.
func (m *ListOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	if utf8.RuneCountInString(m.GetName()) > 64 {
		err := ListOrganizationRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListOrganizationRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationRequestMultiError) AllErrors() []error { return m }

// ListOrganizationRequestValidationError is the validation error returned by
// ListOrganizationRequest.Validate if the designated constraints aren't met.
type ListOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationRequestValidationError) ErrorName() string {
	return "ListOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationRequestValidationError{}

// Validate checks the field values on ListOrganizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationResponseMultiError, or nil if none found.
func (m *ListOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganization() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationResponseValidationError{
						field:  fmt.Sprintf("Organization[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationResponseValidationError{
						field:  fmt.Sprintf("Organization[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationResponseValidationError{
					field:  fmt.Sprintf("Organization[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationResponseMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationResponseMultiError) AllErrors() []error { return m }

// ListOrganizationResponseValidationError is the validation error returned by
// ListOrganizationResponse.Validate if the designated constraints aren't met.
type ListOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationResponseValidationError) ErrorName() string {
	return "ListOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationResponseValidationError{}

// Validate checks the field values on CreateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationRequestMultiError, or nil if none found.
func (m *CreateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := CreateOrganizationRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 0 || l > 255 {
		err := CreateOrganizationRequestValidationError{
			field:  "Description",
			reason: "value length must be between 0 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrganizationRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationRequestValidationError is the validation error returned by
// CreateOrganizationRequest.Validate if the designated constraints aren't met.
type CreateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationRequestValidationError) ErrorName() string {
	return "CreateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationRequestValidationError{}

// Validate checks the field values on CreateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationResponseMultiError, or nil if none found.
func (m *CreateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationResponseValidationError is the validation error returned
// by CreateOrganizationResponse.Validate if the designated constraints aren't met.
type CreateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationResponseValidationError) ErrorName() string {
	return "CreateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationResponseValidationError{}

// Validate checks the field values on UpdateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationRequestMultiError, or nil if none found.
func (m *UpdateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrganizationId() <= 0 {
		err := UpdateOrganizationRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := UpdateOrganizationRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 0 || l > 255 {
		err := UpdateOrganizationRequestValidationError{
			field:  "Description",
			reason: "value length must be between 0 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateOrganizationRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationRequestValidationError is the validation error returned by
// UpdateOrganizationRequest.Validate if the designated constraints aren't met.
type UpdateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationRequestValidationError) ErrorName() string {
	return "UpdateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationRequestValidationError{}

// Validate checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationResponseMultiError, or nil if none found.
func (m *UpdateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationResponseValidationError is the validation error returned
// by UpdateOrganizationResponse.Validate if the designated constraints aren't met.
type UpdateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationResponseValidationError) ErrorName() string {
	return "UpdateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationResponseValidationError{}

// Validate checks the field values on DeleteOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationRequestMultiError, or nil if none found.
func (m *DeleteOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrganizationId() <= 0 {
		err := DeleteOrganizationRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOrganizationRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationRequestValidationError is the validation error returned by
// DeleteOrganizationRequest.Validate if the designated constraints aren't met.
type DeleteOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationRequestValidationError) ErrorName() string {
	return "DeleteOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationRequestValidationError{}

// Validate checks the field values on ListOrganizationInvitationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationInvitationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationInvitationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationInvitationRequestMultiError, or nil if none found.
func (m *ListOrganizationInvitationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationInvitationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrganizationId() <= 0 {
		err := ListOrganizationInvitationRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProjectId() <= 0 {
		err := ListOrganizationInvitationRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListOrganizationInvitationRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationInvitationRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationInvitationRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationInvitationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationInvitationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationInvitationRequestMultiError) AllErrors() []error { return m }

// ListOrganizationInvitationRequestValidationError is the validation error
// returned by ListOrganizationInvitationRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationInvitationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationInvitationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationInvitationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationInvitationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationInvitationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationInvitationRequestValidationError) ErrorName() string {
	return "ListOrganizationInvitationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationInvitationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationInvitationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationInvitationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationInvitationRequestValidationError{}

// Validate checks the field values on ListOrganizationInvitationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationInvitationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationInvitationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationInvitationResponseMultiError, or nil if none found.
func (m *ListOrganizationInvitationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationInvitationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizationInvitations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationInvitationResponseValidationError{
						field:  fmt.Sprintf("OrganizationInvitations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationInvitationResponseValidationError{
						field:  fmt.Sprintf("OrganizationInvitations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationInvitationResponseValidationError{
					field:  fmt.Sprintf("OrganizationInvitations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationInvitationResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationInvitationResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationInvitationResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationInvitationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationInvitationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationInvitationResponseMultiError) AllErrors() []error { return m }

// ListOrganizationInvitationResponseValidationError is the validation error
// returned by ListOrganizationInvitationResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationInvitationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationInvitationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationInvitationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationInvitationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationInvitationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationInvitationResponseValidationError) ErrorName() string {
	return "ListOrganizationInvitationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationInvitationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationInvitationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationInvitationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationInvitationResponseValidationError{}

// Validate checks the field values on CreateOrganizationInvitationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrganizationInvitationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationInvitationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrganizationInvitationRequestMultiError, or nil if none found.
func (m *CreateOrganizationInvitationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationInvitationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrganizationId() <= 0 {
		err := CreateOrganizationInvitationRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProjectId() <= 0 {
		err := CreateOrganizationInvitationRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrganizationInvitationRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationInvitationRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrganizationInvitationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganizationInvitationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationInvitationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationInvitationRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationInvitationRequestValidationError is the validation error
// returned by CreateOrganizationInvitationRequest.Validate if the designated
// constraints aren't met.
type CreateOrganizationInvitationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationInvitationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationInvitationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationInvitationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationInvitationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationInvitationRequestValidationError) ErrorName() string {
	return "CreateOrganizationInvitationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationInvitationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationInvitationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationInvitationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationInvitationRequestValidationError{}

// Validate checks the field values on CreateOrganizationInvitationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrganizationInvitationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationInvitationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrganizationInvitationResponseMultiError, or nil if none found.
func (m *CreateOrganizationInvitationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationInvitationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganizationInvitation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationInvitationResponseValidationError{
					field:  "OrganizationInvitation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationInvitationResponseValidationError{
					field:  "OrganizationInvitation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganizationInvitation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationInvitationResponseValidationError{
				field:  "OrganizationInvitation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationInvitationResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationInvitationResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrganizationInvitationResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganizationInvitationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationInvitationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationInvitationResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationInvitationResponseValidationError is the validation error
// returned by CreateOrganizationInvitationResponse.Validate if the designated
// constraints aren't met.
type CreateOrganizationInvitationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationInvitationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationInvitationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationInvitationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationInvitationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationInvitationResponseValidationError) ErrorName() string {
	return "CreateOrganizationInvitationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationInvitationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationInvitationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationInvitationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationInvitationResponseValidationError{}

// Validate checks the field values on ListProjectsByOrganizationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProjectsByOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectsByOrganizationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListProjectsByOrganizationRequestMultiError, or nil if none found.
func (m *ListProjectsByOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectsByOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrganizationId() <= 0 {
		err := ListProjectsByOrganizationRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListProjectsByOrganizationRequestMultiError(errors)
	}

	return nil
}

// ListProjectsByOrganizationRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListProjectsByOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProjectsByOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectsByOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectsByOrganizationRequestMultiError) AllErrors() []error { return m }

// ListProjectsByOrganizationRequestValidationError is the validation error
// returned by ListProjectsByOrganizationRequest.Validate if the designated
// constraints aren't met.
type ListProjectsByOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsByOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsByOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsByOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsByOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsByOrganizationRequestValidationError) ErrorName() string {
	return "ListProjectsByOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsByOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsByOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsByOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsByOrganizationRequestValidationError{}

// Validate checks the field values on ListProjectsByOrganizationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProjectsByOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectsByOrganizationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListProjectsByOrganizationResponseMultiError, or nil if none found.
func (m *ListProjectsByOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectsByOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProject() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectsByOrganizationResponseValidationError{
						field:  fmt.Sprintf("Project[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectsByOrganizationResponseValidationError{
						field:  fmt.Sprintf("Project[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectsByOrganizationResponseValidationError{
					field:  fmt.Sprintf("Project[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProjectsByOrganizationResponseMultiError(errors)
	}

	return nil
}

// ListProjectsByOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListProjectsByOrganizationResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProjectsByOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectsByOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectsByOrganizationResponseMultiError) AllErrors() []error { return m }

// ListProjectsByOrganizationResponseValidationError is the validation error
// returned by ListProjectsByOrganizationResponse.Validate if the designated
// constraints aren't met.
type ListProjectsByOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsByOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsByOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsByOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsByOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsByOrganizationResponseValidationError) ErrorName() string {
	return "ListProjectsByOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsByOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsByOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsByOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsByOrganizationResponseValidationError{}

// Validate checks the field values on AddProjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProjectsRequestMultiError, or nil if none found.
func (m *AddProjectsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrganizationId() <= 0 {
		err := AddProjectsRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProjectId() <= 0 {
		err := AddProjectsRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddProjectsRequestMultiError(errors)
	}

	return nil
}

// AddProjectsRequestMultiError is an error wrapping multiple validation errors
// returned by AddProjectsRequest.ValidateAll() if the designated constraints
// aren't met.
type AddProjectsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectsRequestMultiError) AllErrors() []error { return m }

// AddProjectsRequestValidationError is the validation error returned by
// AddProjectsRequest.Validate if the designated constraints aren't met.
type AddProjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectsRequestValidationError) ErrorName() string {
	return "AddProjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectsRequestValidationError{}

// Validate checks the field values on AddProjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProjectsResponseMultiError, or nil if none found.
func (m *AddProjectsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganizationProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddProjectsResponseValidationError{
					field:  "OrganizationProject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddProjectsResponseValidationError{
					field:  "OrganizationProject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganizationProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddProjectsResponseValidationError{
				field:  "OrganizationProject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddProjectsResponseMultiError(errors)
	}

	return nil
}

// AddProjectsResponseMultiError is an error wrapping multiple validation
// errors returned by AddProjectsResponse.ValidateAll() if the designated
// constraints aren't met.
type AddProjectsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectsResponseMultiError) AllErrors() []error { return m }

// AddProjectsResponseValidationError is the validation error returned by
// AddProjectsResponse.Validate if the designated constraints aren't met.
type AddProjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectsResponseValidationError) ErrorName() string {
	return "AddProjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectsResponseValidationError{}
