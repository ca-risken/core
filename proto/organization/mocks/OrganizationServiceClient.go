// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	organization "github.com/ca-risken/core/proto/organization"
)

// OrganizationServiceClient is an autogenerated mock type for the OrganizationServiceClient type
type OrganizationServiceClient struct {
	mock.Mock
}

// CreateOrganization provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) CreateOrganization(ctx context.Context, in *organization.CreateOrganizationRequest, opts ...grpc.CallOption) (*organization.CreateOrganizationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 *organization.CreateOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization.CreateOrganizationRequest, ...grpc.CallOption) (*organization.CreateOrganizationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization.CreateOrganizationRequest, ...grpc.CallOption) *organization.CreateOrganizationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization.CreateOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization.CreateOrganizationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganization provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) DeleteOrganization(ctx context.Context, in *organization.DeleteOrganizationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganization")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization.DeleteOrganizationRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization.DeleteOrganizationRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization.DeleteOrganizationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganizationInvitation provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) DeleteOrganizationInvitation(ctx context.Context, in *organization.DeleteOrganizationInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationInvitation")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization.DeleteOrganizationInvitationRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization.DeleteOrganizationInvitationRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization.DeleteOrganizationInvitationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganization provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) ListOrganization(ctx context.Context, in *organization.ListOrganizationRequest, opts ...grpc.CallOption) (*organization.ListOrganizationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganization")
	}

	var r0 *organization.ListOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization.ListOrganizationRequest, ...grpc.CallOption) (*organization.ListOrganizationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization.ListOrganizationRequest, ...grpc.CallOption) *organization.ListOrganizationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization.ListOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization.ListOrganizationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationInvitation provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) ListOrganizationInvitation(ctx context.Context, in *organization.ListOrganizationInvitationRequest, opts ...grpc.CallOption) (*organization.ListOrganizationInvitationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationInvitation")
	}

	var r0 *organization.ListOrganizationInvitationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization.ListOrganizationInvitationRequest, ...grpc.CallOption) (*organization.ListOrganizationInvitationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization.ListOrganizationInvitationRequest, ...grpc.CallOption) *organization.ListOrganizationInvitationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization.ListOrganizationInvitationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization.ListOrganizationInvitationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjectsInOrganization provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) ListProjectsInOrganization(ctx context.Context, in *organization.ListProjectsInOrganizationRequest, opts ...grpc.CallOption) (*organization.ListProjectsInOrganizationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectsInOrganization")
	}

	var r0 *organization.ListProjectsInOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization.ListProjectsInOrganizationRequest, ...grpc.CallOption) (*organization.ListProjectsInOrganizationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization.ListProjectsInOrganizationRequest, ...grpc.CallOption) *organization.ListProjectsInOrganizationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization.ListProjectsInOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization.ListProjectsInOrganizationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutOrganizationInvitation provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) PutOrganizationInvitation(ctx context.Context, in *organization.PutOrganizationInvitationRequest, opts ...grpc.CallOption) (*organization.PutOrganizationInvitationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutOrganizationInvitation")
	}

	var r0 *organization.PutOrganizationInvitationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization.PutOrganizationInvitationRequest, ...grpc.CallOption) (*organization.PutOrganizationInvitationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization.PutOrganizationInvitationRequest, ...grpc.CallOption) *organization.PutOrganizationInvitationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization.PutOrganizationInvitationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization.PutOrganizationInvitationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveProjectsInOrganization provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) RemoveProjectsInOrganization(ctx context.Context, in *organization.RemoveProjectsInOrganizationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectsInOrganization")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization.RemoveProjectsInOrganizationRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization.RemoveProjectsInOrganizationRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization.RemoveProjectsInOrganizationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplyOrganizationInvitation provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) ReplyOrganizationInvitation(ctx context.Context, in *organization.ReplyOrganizationInvitationRequest, opts ...grpc.CallOption) (*organization.ReplyOrganizationInvitationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReplyOrganizationInvitation")
	}

	var r0 *organization.ReplyOrganizationInvitationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization.ReplyOrganizationInvitationRequest, ...grpc.CallOption) (*organization.ReplyOrganizationInvitationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization.ReplyOrganizationInvitationRequest, ...grpc.CallOption) *organization.ReplyOrganizationInvitationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization.ReplyOrganizationInvitationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization.ReplyOrganizationInvitationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganization provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationServiceClient) UpdateOrganization(ctx context.Context, in *organization.UpdateOrganizationRequest, opts ...grpc.CallOption) (*organization.UpdateOrganizationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganization")
	}

	var r0 *organization.UpdateOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization.UpdateOrganizationRequest, ...grpc.CallOption) (*organization.UpdateOrganizationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization.UpdateOrganizationRequest, ...grpc.CallOption) *organization.UpdateOrganizationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization.UpdateOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization.UpdateOrganizationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrganizationServiceClient creates a new instance of OrganizationServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationServiceClient {
	mock := &OrganizationServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
