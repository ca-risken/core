// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: organization_iam/policy.proto

package organization_iam

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListOrganizationPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationPolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationPolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationPolicyRequestMultiError, or nil if none found.
func (m *ListOrganizationPolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationPolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	if utf8.RuneCountInString(m.GetName()) > 64 {
		err := ListOrganizationPolicyRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RoleId

	if len(errors) > 0 {
		return ListOrganizationPolicyRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationPolicyRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationPolicyRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationPolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationPolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationPolicyRequestMultiError) AllErrors() []error { return m }

// ListOrganizationPolicyRequestValidationError is the validation error
// returned by ListOrganizationPolicyRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationPolicyRequestValidationError) ErrorName() string {
	return "ListOrganizationPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationPolicyRequestValidationError{}

// Validate checks the field values on ListOrganizationPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationPolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationPolicyResponseMultiError, or nil if none found.
func (m *ListOrganizationPolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationPolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListOrganizationPolicyResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationPolicyResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationPolicyResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationPolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationPolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationPolicyResponseMultiError) AllErrors() []error { return m }

// ListOrganizationPolicyResponseValidationError is the validation error
// returned by ListOrganizationPolicyResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationPolicyResponseValidationError) ErrorName() string {
	return "ListOrganizationPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationPolicyResponseValidationError{}

// Validate checks the field values on GetOrganizationPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationPolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationPolicyRequestMultiError, or nil if none found.
func (m *GetOrganizationPolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationPolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrganizationId() <= 0 {
		err := GetOrganizationPolicyRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPolicyId() <= 0 {
		err := GetOrganizationPolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrganizationPolicyRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationPolicyRequestMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationPolicyRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationPolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationPolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationPolicyRequestMultiError) AllErrors() []error { return m }

// GetOrganizationPolicyRequestValidationError is the validation error returned
// by GetOrganizationPolicyRequest.Validate if the designated constraints
// aren't met.
type GetOrganizationPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationPolicyRequestValidationError) ErrorName() string {
	return "GetOrganizationPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationPolicyRequestValidationError{}

// Validate checks the field values on GetOrganizationPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationPolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrganizationPolicyResponseMultiError, or nil if none found.
func (m *GetOrganizationPolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationPolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationPolicyResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationPolicyResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationPolicyResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationPolicyResponseMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationPolicyResponse.ValidateAll()
// if the designated constraints aren't met.
type GetOrganizationPolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationPolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationPolicyResponseMultiError) AllErrors() []error { return m }

// GetOrganizationPolicyResponseValidationError is the validation error
// returned by GetOrganizationPolicyResponse.Validate if the designated
// constraints aren't met.
type GetOrganizationPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationPolicyResponseValidationError) ErrorName() string {
	return "GetOrganizationPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationPolicyResponseValidationError{}

// Validate checks the field values on PutOrganizationPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutOrganizationPolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutOrganizationPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutOrganizationPolicyRequestMultiError, or nil if none found.
func (m *PutOrganizationPolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutOrganizationPolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrganizationId() <= 0 {
		err := PutOrganizationPolicyRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := PutOrganizationPolicyRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetActionPtn()) < 1 {
		err := PutOrganizationPolicyRequestValidationError{
			field:  "ActionPtn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PutOrganizationPolicyRequestMultiError(errors)
	}

	return nil
}

// PutOrganizationPolicyRequestMultiError is an error wrapping multiple
// validation errors returned by PutOrganizationPolicyRequest.ValidateAll() if
// the designated constraints aren't met.
type PutOrganizationPolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutOrganizationPolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutOrganizationPolicyRequestMultiError) AllErrors() []error { return m }

// PutOrganizationPolicyRequestValidationError is the validation error returned
// by PutOrganizationPolicyRequest.Validate if the designated constraints
// aren't met.
type PutOrganizationPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutOrganizationPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutOrganizationPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutOrganizationPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutOrganizationPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutOrganizationPolicyRequestValidationError) ErrorName() string {
	return "PutOrganizationPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutOrganizationPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutOrganizationPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutOrganizationPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutOrganizationPolicyRequestValidationError{}

// Validate checks the field values on PutOrganizationPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutOrganizationPolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutOrganizationPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PutOrganizationPolicyResponseMultiError, or nil if none found.
func (m *PutOrganizationPolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutOrganizationPolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PutOrganizationPolicyResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PutOrganizationPolicyResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutOrganizationPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PutOrganizationPolicyResponseMultiError(errors)
	}

	return nil
}

// PutOrganizationPolicyResponseMultiError is an error wrapping multiple
// validation errors returned by PutOrganizationPolicyResponse.ValidateAll()
// if the designated constraints aren't met.
type PutOrganizationPolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutOrganizationPolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutOrganizationPolicyResponseMultiError) AllErrors() []error { return m }

// PutOrganizationPolicyResponseValidationError is the validation error
// returned by PutOrganizationPolicyResponse.Validate if the designated
// constraints aren't met.
type PutOrganizationPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutOrganizationPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutOrganizationPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutOrganizationPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutOrganizationPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutOrganizationPolicyResponseValidationError) ErrorName() string {
	return "PutOrganizationPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutOrganizationPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutOrganizationPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutOrganizationPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutOrganizationPolicyResponseValidationError{}

// Validate checks the field values on DeleteOrganizationPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationPolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationPolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationPolicyRequestMultiError, or nil if none found.
func (m *DeleteOrganizationPolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationPolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrganizationId() <= 0 {
		err := DeleteOrganizationPolicyRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPolicyId() <= 0 {
		err := DeleteOrganizationPolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOrganizationPolicyRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationPolicyRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationPolicyRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteOrganizationPolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationPolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationPolicyRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationPolicyRequestValidationError is the validation error
// returned by DeleteOrganizationPolicyRequest.Validate if the designated
// constraints aren't met.
type DeleteOrganizationPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationPolicyRequestValidationError) ErrorName() string {
	return "DeleteOrganizationPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationPolicyRequestValidationError{}

// Validate checks the field values on AttachOrganizationPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttachOrganizationPolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttachOrganizationPolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AttachOrganizationPolicyRequestMultiError, or nil if none found.
func (m *AttachOrganizationPolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AttachOrganizationPolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() <= 0 {
		err := AttachOrganizationPolicyRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPolicyId() <= 0 {
		err := AttachOrganizationPolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AttachOrganizationPolicyRequestMultiError(errors)
	}

	return nil
}

// AttachOrganizationPolicyRequestMultiError is an error wrapping multiple
// validation errors returned by AttachOrganizationPolicyRequest.ValidateAll()
// if the designated constraints aren't met.
type AttachOrganizationPolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachOrganizationPolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachOrganizationPolicyRequestMultiError) AllErrors() []error { return m }

// AttachOrganizationPolicyRequestValidationError is the validation error
// returned by AttachOrganizationPolicyRequest.Validate if the designated
// constraints aren't met.
type AttachOrganizationPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachOrganizationPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachOrganizationPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachOrganizationPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachOrganizationPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachOrganizationPolicyRequestValidationError) ErrorName() string {
	return "AttachOrganizationPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AttachOrganizationPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachOrganizationPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachOrganizationPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachOrganizationPolicyRequestValidationError{}

// Validate checks the field values on AttachOrganizationPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AttachOrganizationPolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttachOrganizationPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AttachOrganizationPolicyResponseMultiError, or nil if none found.
func (m *AttachOrganizationPolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AttachOrganizationPolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttachOrganizationPolicyResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttachOrganizationPolicyResponseValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttachOrganizationPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttachOrganizationPolicyResponseMultiError(errors)
	}

	return nil
}

// AttachOrganizationPolicyResponseMultiError is an error wrapping multiple
// validation errors returned by
// AttachOrganizationPolicyResponse.ValidateAll() if the designated
// constraints aren't met.
type AttachOrganizationPolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachOrganizationPolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachOrganizationPolicyResponseMultiError) AllErrors() []error { return m }

// AttachOrganizationPolicyResponseValidationError is the validation error
// returned by AttachOrganizationPolicyResponse.Validate if the designated
// constraints aren't met.
type AttachOrganizationPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachOrganizationPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachOrganizationPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachOrganizationPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachOrganizationPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachOrganizationPolicyResponseValidationError) ErrorName() string {
	return "AttachOrganizationPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AttachOrganizationPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachOrganizationPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachOrganizationPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachOrganizationPolicyResponseValidationError{}

// Validate checks the field values on DetachOrganizationPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DetachOrganizationPolicyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetachOrganizationPolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DetachOrganizationPolicyRequestMultiError, or nil if none found.
func (m *DetachOrganizationPolicyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DetachOrganizationPolicyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() <= 0 {
		err := DetachOrganizationPolicyRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPolicyId() <= 0 {
		err := DetachOrganizationPolicyRequestValidationError{
			field:  "PolicyId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DetachOrganizationPolicyRequestMultiError(errors)
	}

	return nil
}

// DetachOrganizationPolicyRequestMultiError is an error wrapping multiple
// validation errors returned by DetachOrganizationPolicyRequest.ValidateAll()
// if the designated constraints aren't met.
type DetachOrganizationPolicyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetachOrganizationPolicyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetachOrganizationPolicyRequestMultiError) AllErrors() []error { return m }

// DetachOrganizationPolicyRequestValidationError is the validation error
// returned by DetachOrganizationPolicyRequest.Validate if the designated
// constraints aren't met.
type DetachOrganizationPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetachOrganizationPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetachOrganizationPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetachOrganizationPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetachOrganizationPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetachOrganizationPolicyRequestValidationError) ErrorName() string {
	return "DetachOrganizationPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DetachOrganizationPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetachOrganizationPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetachOrganizationPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetachOrganizationPolicyRequestValidationError{}
