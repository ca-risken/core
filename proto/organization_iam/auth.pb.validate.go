// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: organization_iam/auth.proto

package organization_iam

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IsAuthorizedOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAuthorizedOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAuthorizedOrganizationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IsAuthorizedOrganizationRequestMultiError, or nil if none found.
func (m *IsAuthorizedOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAuthorizedOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := IsAuthorizedOrganizationRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrganizationId() <= 0 {
		err := IsAuthorizedOrganizationRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetActionName()) < 1 {
		err := IsAuthorizedOrganizationRequestValidationError{
			field:  "ActionName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IsAuthorizedOrganizationRequestMultiError(errors)
	}

	return nil
}

// IsAuthorizedOrganizationRequestMultiError is an error wrapping multiple
// validation errors returned by IsAuthorizedOrganizationRequest.ValidateAll()
// if the designated constraints aren't met.
type IsAuthorizedOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAuthorizedOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAuthorizedOrganizationRequestMultiError) AllErrors() []error { return m }

// IsAuthorizedOrganizationRequestValidationError is the validation error
// returned by IsAuthorizedOrganizationRequest.Validate if the designated
// constraints aren't met.
type IsAuthorizedOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAuthorizedOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAuthorizedOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAuthorizedOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAuthorizedOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAuthorizedOrganizationRequestValidationError) ErrorName() string {
	return "IsAuthorizedOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsAuthorizedOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAuthorizedOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAuthorizedOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAuthorizedOrganizationRequestValidationError{}

// Validate checks the field values on IsAuthorizedOrganizationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IsAuthorizedOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAuthorizedOrganizationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IsAuthorizedOrganizationResponseMultiError, or nil if none found.
func (m *IsAuthorizedOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAuthorizedOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return IsAuthorizedOrganizationResponseMultiError(errors)
	}

	return nil
}

// IsAuthorizedOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by
// IsAuthorizedOrganizationResponse.ValidateAll() if the designated
// constraints aren't met.
type IsAuthorizedOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAuthorizedOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAuthorizedOrganizationResponseMultiError) AllErrors() []error { return m }

// IsAuthorizedOrganizationResponseValidationError is the validation error
// returned by IsAuthorizedOrganizationResponse.Validate if the designated
// constraints aren't met.
type IsAuthorizedOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAuthorizedOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAuthorizedOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAuthorizedOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAuthorizedOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAuthorizedOrganizationResponseValidationError) ErrorName() string {
	return "IsAuthorizedOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsAuthorizedOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAuthorizedOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAuthorizedOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAuthorizedOrganizationResponseValidationError{}

// Validate checks the field values on IsAdminRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAdminRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsAdminRequestMultiError,
// or nil if none found.
func (m *IsAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := IsAdminRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IsAdminRequestMultiError(errors)
	}

	return nil
}

// IsAdminRequestMultiError is an error wrapping multiple validation errors
// returned by IsAdminRequest.ValidateAll() if the designated constraints
// aren't met.
type IsAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAdminRequestMultiError) AllErrors() []error { return m }

// IsAdminRequestValidationError is the validation error returned by
// IsAdminRequest.Validate if the designated constraints aren't met.
type IsAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAdminRequestValidationError) ErrorName() string { return "IsAdminRequestValidationError" }

// Error satisfies the builtin error interface
func (e IsAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAdminRequestValidationError{}

// Validate checks the field values on IsAdminResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IsAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsAdminResponseMultiError, or nil if none found.
func (m *IsAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return IsAdminResponseMultiError(errors)
	}

	return nil
}

// IsAdminResponseMultiError is an error wrapping multiple validation errors
// returned by IsAdminResponse.ValidateAll() if the designated constraints
// aren't met.
type IsAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAdminResponseMultiError) AllErrors() []error { return m }

// IsAdminResponseValidationError is the validation error returned by
// IsAdminResponse.Validate if the designated constraints aren't met.
type IsAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAdminResponseValidationError) ErrorName() string { return "IsAdminResponseValidationError" }

// Error satisfies the builtin error interface
func (e IsAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAdminResponseValidationError{}
