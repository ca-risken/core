// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	organization_iam "github.com/ca-risken/core/proto/organization_iam"
)

// OrganizationIAMServiceClient is an autogenerated mock type for the OrganizationIAMServiceClient type
type OrganizationIAMServiceClient struct {
	mock.Mock
}

// AttachOrganizationPolicy provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationIAMServiceClient) AttachOrganizationPolicy(ctx context.Context, in *organization_iam.AttachOrganizationPolicyRequest, opts ...grpc.CallOption) (*organization_iam.AttachOrganizationPolicyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachOrganizationPolicy")
	}

	var r0 *organization_iam.AttachOrganizationPolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.AttachOrganizationPolicyRequest, ...grpc.CallOption) (*organization_iam.AttachOrganizationPolicyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.AttachOrganizationPolicyRequest, ...grpc.CallOption) *organization_iam.AttachOrganizationPolicyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_iam.AttachOrganizationPolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization_iam.AttachOrganizationPolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachOrganizationRole provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationIAMServiceClient) AttachOrganizationRole(ctx context.Context, in *organization_iam.AttachOrganizationRoleRequest, opts ...grpc.CallOption) (*organization_iam.AttachOrganizationRoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachOrganizationRole")
	}

	var r0 *organization_iam.AttachOrganizationRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.AttachOrganizationRoleRequest, ...grpc.CallOption) (*organization_iam.AttachOrganizationRoleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.AttachOrganizationRoleRequest, ...grpc.CallOption) *organization_iam.AttachOrganizationRoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_iam.AttachOrganizationRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization_iam.AttachOrganizationRoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganizationPolicy provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationIAMServiceClient) DeleteOrganizationPolicy(ctx context.Context, in *organization_iam.DeleteOrganizationPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationPolicy")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.DeleteOrganizationPolicyRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.DeleteOrganizationPolicyRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization_iam.DeleteOrganizationPolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganizationRole provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationIAMServiceClient) DeleteOrganizationRole(ctx context.Context, in *organization_iam.DeleteOrganizationRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationRole")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.DeleteOrganizationRoleRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.DeleteOrganizationRoleRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization_iam.DeleteOrganizationRoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachOrganizationPolicy provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationIAMServiceClient) DetachOrganizationPolicy(ctx context.Context, in *organization_iam.DetachOrganizationPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachOrganizationPolicy")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.DetachOrganizationPolicyRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.DetachOrganizationPolicyRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization_iam.DetachOrganizationPolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachOrganizationRole provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationIAMServiceClient) DetachOrganizationRole(ctx context.Context, in *organization_iam.DetachOrganizationRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachOrganizationRole")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.DetachOrganizationRoleRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.DetachOrganizationRoleRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization_iam.DetachOrganizationRoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationPolicy provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationIAMServiceClient) GetOrganizationPolicy(ctx context.Context, in *organization_iam.GetOrganizationPolicyRequest, opts ...grpc.CallOption) (*organization_iam.GetOrganizationPolicyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationPolicy")
	}

	var r0 *organization_iam.GetOrganizationPolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.GetOrganizationPolicyRequest, ...grpc.CallOption) (*organization_iam.GetOrganizationPolicyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.GetOrganizationPolicyRequest, ...grpc.CallOption) *organization_iam.GetOrganizationPolicyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_iam.GetOrganizationPolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization_iam.GetOrganizationPolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationRole provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationIAMServiceClient) GetOrganizationRole(ctx context.Context, in *organization_iam.GetOrganizationRoleRequest, opts ...grpc.CallOption) (*organization_iam.GetOrganizationRoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationRole")
	}

	var r0 *organization_iam.GetOrganizationRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.GetOrganizationRoleRequest, ...grpc.CallOption) (*organization_iam.GetOrganizationRoleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.GetOrganizationRoleRequest, ...grpc.CallOption) *organization_iam.GetOrganizationRoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_iam.GetOrganizationRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization_iam.GetOrganizationRoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAdmin provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationIAMServiceClient) IsAdmin(ctx context.Context, in *organization_iam.IsAdminRequest, opts ...grpc.CallOption) (*organization_iam.IsAdminResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IsAdmin")
	}

	var r0 *organization_iam.IsAdminResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.IsAdminRequest, ...grpc.CallOption) (*organization_iam.IsAdminResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.IsAdminRequest, ...grpc.CallOption) *organization_iam.IsAdminResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_iam.IsAdminResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization_iam.IsAdminRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAuthorizedOrganization provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationIAMServiceClient) IsAuthorizedOrganization(ctx context.Context, in *organization_iam.IsAuthorizedOrganizationRequest, opts ...grpc.CallOption) (*organization_iam.IsAuthorizedOrganizationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IsAuthorizedOrganization")
	}

	var r0 *organization_iam.IsAuthorizedOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.IsAuthorizedOrganizationRequest, ...grpc.CallOption) (*organization_iam.IsAuthorizedOrganizationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.IsAuthorizedOrganizationRequest, ...grpc.CallOption) *organization_iam.IsAuthorizedOrganizationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_iam.IsAuthorizedOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization_iam.IsAuthorizedOrganizationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationPolicy provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationIAMServiceClient) ListOrganizationPolicy(ctx context.Context, in *organization_iam.ListOrganizationPolicyRequest, opts ...grpc.CallOption) (*organization_iam.ListOrganizationPolicyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationPolicy")
	}

	var r0 *organization_iam.ListOrganizationPolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.ListOrganizationPolicyRequest, ...grpc.CallOption) (*organization_iam.ListOrganizationPolicyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.ListOrganizationPolicyRequest, ...grpc.CallOption) *organization_iam.ListOrganizationPolicyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_iam.ListOrganizationPolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization_iam.ListOrganizationPolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationRole provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationIAMServiceClient) ListOrganizationRole(ctx context.Context, in *organization_iam.ListOrganizationRoleRequest, opts ...grpc.CallOption) (*organization_iam.ListOrganizationRoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationRole")
	}

	var r0 *organization_iam.ListOrganizationRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.ListOrganizationRoleRequest, ...grpc.CallOption) (*organization_iam.ListOrganizationRoleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.ListOrganizationRoleRequest, ...grpc.CallOption) *organization_iam.ListOrganizationRoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_iam.ListOrganizationRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization_iam.ListOrganizationRoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutOrganizationPolicy provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationIAMServiceClient) PutOrganizationPolicy(ctx context.Context, in *organization_iam.PutOrganizationPolicyRequest, opts ...grpc.CallOption) (*organization_iam.PutOrganizationPolicyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutOrganizationPolicy")
	}

	var r0 *organization_iam.PutOrganizationPolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.PutOrganizationPolicyRequest, ...grpc.CallOption) (*organization_iam.PutOrganizationPolicyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.PutOrganizationPolicyRequest, ...grpc.CallOption) *organization_iam.PutOrganizationPolicyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_iam.PutOrganizationPolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization_iam.PutOrganizationPolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutOrganizationRole provides a mock function with given fields: ctx, in, opts
func (_m *OrganizationIAMServiceClient) PutOrganizationRole(ctx context.Context, in *organization_iam.PutOrganizationRoleRequest, opts ...grpc.CallOption) (*organization_iam.PutOrganizationRoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutOrganizationRole")
	}

	var r0 *organization_iam.PutOrganizationRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.PutOrganizationRoleRequest, ...grpc.CallOption) (*organization_iam.PutOrganizationRoleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organization_iam.PutOrganizationRoleRequest, ...grpc.CallOption) *organization_iam.PutOrganizationRoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_iam.PutOrganizationRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organization_iam.PutOrganizationRoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrganizationIAMServiceClient creates a new instance of OrganizationIAMServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationIAMServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationIAMServiceClient {
	mock := &OrganizationIAMServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
