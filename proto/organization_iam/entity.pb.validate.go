// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: organization_iam/entity.proto

package organization_iam

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OrganizationRole with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrganizationRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationRole with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationRoleMultiError, or nil if none found.
func (m *OrganizationRole) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for Name

	// no validation rules for OrganizationId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return OrganizationRoleMultiError(errors)
	}

	return nil
}

// OrganizationRoleMultiError is an error wrapping multiple validation errors
// returned by OrganizationRole.ValidateAll() if the designated constraints
// aren't met.
type OrganizationRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationRoleMultiError) AllErrors() []error { return m }

// OrganizationRoleValidationError is the validation error returned by
// OrganizationRole.Validate if the designated constraints aren't met.
type OrganizationRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationRoleValidationError) ErrorName() string { return "OrganizationRoleValidationError" }

// Error satisfies the builtin error interface
func (e OrganizationRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationRoleValidationError{}

// Validate checks the field values on OrganizationRoleForUpsert with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationRoleForUpsert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationRoleForUpsert with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationRoleForUpsertMultiError, or nil if none found.
func (m *OrganizationRoleForUpsert) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationRoleForUpsert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := OrganizationRoleForUpsertValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrganizationId() <= 0 {
		err := OrganizationRoleForUpsertValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrganizationRoleForUpsertMultiError(errors)
	}

	return nil
}

// OrganizationRoleForUpsertMultiError is an error wrapping multiple validation
// errors returned by OrganizationRoleForUpsert.ValidateAll() if the
// designated constraints aren't met.
type OrganizationRoleForUpsertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationRoleForUpsertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationRoleForUpsertMultiError) AllErrors() []error { return m }

// OrganizationRoleForUpsertValidationError is the validation error returned by
// OrganizationRoleForUpsert.Validate if the designated constraints aren't met.
type OrganizationRoleForUpsertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationRoleForUpsertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationRoleForUpsertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationRoleForUpsertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationRoleForUpsertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationRoleForUpsertValidationError) ErrorName() string {
	return "OrganizationRoleForUpsertValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationRoleForUpsertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationRoleForUpsert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationRoleForUpsertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationRoleForUpsertValidationError{}

// Validate checks the field values on OrganizationPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationPolicy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationPolicyMultiError, or nil if none found.
func (m *OrganizationPolicy) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationPolicy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyId

	// no validation rules for Name

	// no validation rules for OrganizationId

	// no validation rules for ActionPtn

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return OrganizationPolicyMultiError(errors)
	}

	return nil
}

// OrganizationPolicyMultiError is an error wrapping multiple validation errors
// returned by OrganizationPolicy.ValidateAll() if the designated constraints
// aren't met.
type OrganizationPolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationPolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationPolicyMultiError) AllErrors() []error { return m }

// OrganizationPolicyValidationError is the validation error returned by
// OrganizationPolicy.Validate if the designated constraints aren't met.
type OrganizationPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationPolicyValidationError) ErrorName() string {
	return "OrganizationPolicyValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationPolicyValidationError{}

// Validate checks the field values on OrganizationPolicyForUpsert with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationPolicyForUpsert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationPolicyForUpsert with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationPolicyForUpsertMultiError, or nil if none found.
func (m *OrganizationPolicyForUpsert) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationPolicyForUpsert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := OrganizationPolicyForUpsertValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrganizationId() <= 0 {
		err := OrganizationPolicyForUpsertValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetActionPtn()) < 1 {
		err := OrganizationPolicyForUpsertValidationError{
			field:  "ActionPtn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrganizationPolicyForUpsertMultiError(errors)
	}

	return nil
}

// OrganizationPolicyForUpsertMultiError is an error wrapping multiple
// validation errors returned by OrganizationPolicyForUpsert.ValidateAll() if
// the designated constraints aren't met.
type OrganizationPolicyForUpsertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationPolicyForUpsertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationPolicyForUpsertMultiError) AllErrors() []error { return m }

// OrganizationPolicyForUpsertValidationError is the validation error returned
// by OrganizationPolicyForUpsert.Validate if the designated constraints
// aren't met.
type OrganizationPolicyForUpsertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationPolicyForUpsertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationPolicyForUpsertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationPolicyForUpsertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationPolicyForUpsertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationPolicyForUpsertValidationError) ErrorName() string {
	return "OrganizationPolicyForUpsertValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationPolicyForUpsertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationPolicyForUpsert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationPolicyForUpsertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationPolicyForUpsertValidationError{}
