// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: organization_iam/role.proto

package organization_iam

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationRoleRequestMultiError, or nil if none found.
func (m *ListOrganizationRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	if utf8.RuneCountInString(m.GetName()) > 64 {
		err := ListOrganizationRoleRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	// no validation rules for AccessTokenId

	if len(errors) > 0 {
		return ListOrganizationRoleRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationRoleRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationRoleRequest.ValidateAll() if
// the designated constraints aren't met.
type ListOrganizationRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationRoleRequestMultiError) AllErrors() []error { return m }

// ListOrganizationRoleRequestValidationError is the validation error returned
// by ListOrganizationRoleRequest.Validate if the designated constraints
// aren't met.
type ListOrganizationRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationRoleRequestValidationError) ErrorName() string {
	return "ListOrganizationRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationRoleRequestValidationError{}

// Validate checks the field values on ListOrganizationRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationRoleResponseMultiError, or nil if none found.
func (m *ListOrganizationRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListOrganizationRoleResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationRoleResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationRoleResponse.ValidateAll() if
// the designated constraints aren't met.
type ListOrganizationRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationRoleResponseMultiError) AllErrors() []error { return m }

// ListOrganizationRoleResponseValidationError is the validation error returned
// by ListOrganizationRoleResponse.Validate if the designated constraints
// aren't met.
type ListOrganizationRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationRoleResponseValidationError) ErrorName() string {
	return "ListOrganizationRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationRoleResponseValidationError{}

// Validate checks the field values on GetOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationRoleRequestMultiError, or nil if none found.
func (m *GetOrganizationRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrganizationId() <= 0 {
		err := GetOrganizationRoleRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRoleId() <= 0 {
		err := GetOrganizationRoleRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrganizationRoleRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationRoleRequestMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationRoleRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationRoleRequestMultiError) AllErrors() []error { return m }

// GetOrganizationRoleRequestValidationError is the validation error returned
// by GetOrganizationRoleRequest.Validate if the designated constraints aren't met.
type GetOrganizationRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationRoleRequestValidationError) ErrorName() string {
	return "GetOrganizationRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationRoleRequestValidationError{}

// Validate checks the field values on GetOrganizationRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationRoleResponseMultiError, or nil if none found.
func (m *GetOrganizationRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationRoleResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationRoleResponseMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationRoleResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationRoleResponseMultiError) AllErrors() []error { return m }

// GetOrganizationRoleResponseValidationError is the validation error returned
// by GetOrganizationRoleResponse.Validate if the designated constraints
// aren't met.
type GetOrganizationRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationRoleResponseValidationError) ErrorName() string {
	return "GetOrganizationRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationRoleResponseValidationError{}

// Validate checks the field values on PutOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutOrganizationRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutOrganizationRoleRequestMultiError, or nil if none found.
func (m *PutOrganizationRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutOrganizationRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrganizationId() <= 0 {
		err := PutOrganizationRoleRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := PutOrganizationRoleRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PutOrganizationRoleRequestMultiError(errors)
	}

	return nil
}

// PutOrganizationRoleRequestMultiError is an error wrapping multiple
// validation errors returned by PutOrganizationRoleRequest.ValidateAll() if
// the designated constraints aren't met.
type PutOrganizationRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutOrganizationRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutOrganizationRoleRequestMultiError) AllErrors() []error { return m }

// PutOrganizationRoleRequestValidationError is the validation error returned
// by PutOrganizationRoleRequest.Validate if the designated constraints aren't met.
type PutOrganizationRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutOrganizationRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutOrganizationRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutOrganizationRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutOrganizationRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutOrganizationRoleRequestValidationError) ErrorName() string {
	return "PutOrganizationRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutOrganizationRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutOrganizationRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutOrganizationRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutOrganizationRoleRequestValidationError{}

// Validate checks the field values on PutOrganizationRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutOrganizationRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutOrganizationRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutOrganizationRoleResponseMultiError, or nil if none found.
func (m *PutOrganizationRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutOrganizationRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PutOrganizationRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PutOrganizationRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutOrganizationRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PutOrganizationRoleResponseMultiError(errors)
	}

	return nil
}

// PutOrganizationRoleResponseMultiError is an error wrapping multiple
// validation errors returned by PutOrganizationRoleResponse.ValidateAll() if
// the designated constraints aren't met.
type PutOrganizationRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutOrganizationRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutOrganizationRoleResponseMultiError) AllErrors() []error { return m }

// PutOrganizationRoleResponseValidationError is the validation error returned
// by PutOrganizationRoleResponse.Validate if the designated constraints
// aren't met.
type PutOrganizationRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutOrganizationRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutOrganizationRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutOrganizationRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutOrganizationRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutOrganizationRoleResponseValidationError) ErrorName() string {
	return "PutOrganizationRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutOrganizationRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutOrganizationRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutOrganizationRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutOrganizationRoleResponseValidationError{}

// Validate checks the field values on DeleteOrganizationRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationRoleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationRoleRequestMultiError, or nil if none found.
func (m *DeleteOrganizationRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrganizationId() <= 0 {
		err := DeleteOrganizationRoleRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRoleId() <= 0 {
		err := DeleteOrganizationRoleRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOrganizationRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationRoleRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationRoleRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteOrganizationRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationRoleRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationRoleRequestValidationError is the validation error
// returned by DeleteOrganizationRoleRequest.Validate if the designated
// constraints aren't met.
type DeleteOrganizationRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationRoleRequestValidationError) ErrorName() string {
	return "DeleteOrganizationRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationRoleRequestValidationError{}
