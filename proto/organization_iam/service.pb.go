// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.3
// source: organization_iam/service.proto

package organization_iam

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_organization_iam_service_proto protoreflect.FileDescriptor

var file_organization_iam_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x61, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x61, 0x6d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x61, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0x9c, 0x10, 0x0a, 0x16, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x41, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7f,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x61, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61,
	0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a,
	0x13, 0x50, 0x75, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x50, 0x75, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e,
	0x50, 0x75, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x16, 0x44,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x61, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x82, 0x01, 0x0a, 0x15, 0x50, 0x75, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x61, 0x6d, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x8b, 0x01, 0x0a, 0x18, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x36,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6a, 0x0a, 0x18, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x36, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x61, 0x6d, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x8b, 0x01, 0x0a, 0x18,
	0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d,
	0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x3a, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x61, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x1b, 0x50, 0x75, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x50, 0x75, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x1e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x3c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x61, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x61, 0x2d, 0x72, 0x69, 0x73, 0x6b, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_organization_iam_service_proto_goTypes = []interface{}{
	(*ListOrganizationRoleRequest)(nil),           // 0: core.organization_iam.ListOrganizationRoleRequest
	(*GetOrganizationRoleRequest)(nil),            // 1: core.organization_iam.GetOrganizationRoleRequest
	(*PutOrganizationRoleRequest)(nil),            // 2: core.organization_iam.PutOrganizationRoleRequest
	(*DeleteOrganizationRoleRequest)(nil),         // 3: core.organization_iam.DeleteOrganizationRoleRequest
	(*AttachOrganizationRoleRequest)(nil),         // 4: core.organization_iam.AttachOrganizationRoleRequest
	(*DetachOrganizationRoleRequest)(nil),         // 5: core.organization_iam.DetachOrganizationRoleRequest
	(*ListOrganizationPolicyRequest)(nil),         // 6: core.organization_iam.ListOrganizationPolicyRequest
	(*GetOrganizationPolicyRequest)(nil),          // 7: core.organization_iam.GetOrganizationPolicyRequest
	(*PutOrganizationPolicyRequest)(nil),          // 8: core.organization_iam.PutOrganizationPolicyRequest
	(*DeleteOrganizationPolicyRequest)(nil),       // 9: core.organization_iam.DeleteOrganizationPolicyRequest
	(*AttachOrganizationPolicyRequest)(nil),       // 10: core.organization_iam.AttachOrganizationPolicyRequest
	(*DetachOrganizationPolicyRequest)(nil),       // 11: core.organization_iam.DetachOrganizationPolicyRequest
	(*IsAuthorizedOrganizationRequest)(nil),       // 12: core.organization_iam.IsAuthorizedOrganizationRequest
	(*ListOrganizationUserReservedRequest)(nil),   // 13: core.organization_iam.ListOrganizationUserReservedRequest
	(*PutOrganizationUserReservedRequest)(nil),    // 14: core.organization_iam.PutOrganizationUserReservedRequest
	(*DeleteOrganizationUserReservedRequest)(nil), // 15: core.organization_iam.DeleteOrganizationUserReservedRequest
	(*ListOrganizationRoleResponse)(nil),          // 16: core.organization_iam.ListOrganizationRoleResponse
	(*GetOrganizationRoleResponse)(nil),           // 17: core.organization_iam.GetOrganizationRoleResponse
	(*PutOrganizationRoleResponse)(nil),           // 18: core.organization_iam.PutOrganizationRoleResponse
	(*emptypb.Empty)(nil),                         // 19: google.protobuf.Empty
	(*AttachOrganizationRoleResponse)(nil),        // 20: core.organization_iam.AttachOrganizationRoleResponse
	(*ListOrganizationPolicyResponse)(nil),        // 21: core.organization_iam.ListOrganizationPolicyResponse
	(*GetOrganizationPolicyResponse)(nil),         // 22: core.organization_iam.GetOrganizationPolicyResponse
	(*PutOrganizationPolicyResponse)(nil),         // 23: core.organization_iam.PutOrganizationPolicyResponse
	(*AttachOrganizationPolicyResponse)(nil),      // 24: core.organization_iam.AttachOrganizationPolicyResponse
	(*IsAuthorizedOrganizationResponse)(nil),      // 25: core.organization_iam.IsAuthorizedOrganizationResponse
	(*ListOrganizationUserReservedResponse)(nil),  // 26: core.organization_iam.ListOrganizationUserReservedResponse
	(*PutOrganizationUserReservedResponse)(nil),   // 27: core.organization_iam.PutOrganizationUserReservedResponse
}
var file_organization_iam_service_proto_depIdxs = []int32{
	0,  // 0: core.organization_iam.OrganizationIAMService.ListOrganizationRole:input_type -> core.organization_iam.ListOrganizationRoleRequest
	1,  // 1: core.organization_iam.OrganizationIAMService.GetOrganizationRole:input_type -> core.organization_iam.GetOrganizationRoleRequest
	2,  // 2: core.organization_iam.OrganizationIAMService.PutOrganizationRole:input_type -> core.organization_iam.PutOrganizationRoleRequest
	3,  // 3: core.organization_iam.OrganizationIAMService.DeleteOrganizationRole:input_type -> core.organization_iam.DeleteOrganizationRoleRequest
	4,  // 4: core.organization_iam.OrganizationIAMService.AttachOrganizationRole:input_type -> core.organization_iam.AttachOrganizationRoleRequest
	5,  // 5: core.organization_iam.OrganizationIAMService.DetachOrganizationRole:input_type -> core.organization_iam.DetachOrganizationRoleRequest
	6,  // 6: core.organization_iam.OrganizationIAMService.ListOrganizationPolicy:input_type -> core.organization_iam.ListOrganizationPolicyRequest
	7,  // 7: core.organization_iam.OrganizationIAMService.GetOrganizationPolicy:input_type -> core.organization_iam.GetOrganizationPolicyRequest
	8,  // 8: core.organization_iam.OrganizationIAMService.PutOrganizationPolicy:input_type -> core.organization_iam.PutOrganizationPolicyRequest
	9,  // 9: core.organization_iam.OrganizationIAMService.DeleteOrganizationPolicy:input_type -> core.organization_iam.DeleteOrganizationPolicyRequest
	10, // 10: core.organization_iam.OrganizationIAMService.AttachOrganizationPolicy:input_type -> core.organization_iam.AttachOrganizationPolicyRequest
	11, // 11: core.organization_iam.OrganizationIAMService.DetachOrganizationPolicy:input_type -> core.organization_iam.DetachOrganizationPolicyRequest
	12, // 12: core.organization_iam.OrganizationIAMService.IsAuthorizedOrganization:input_type -> core.organization_iam.IsAuthorizedOrganizationRequest
	13, // 13: core.organization_iam.OrganizationIAMService.ListOrganizationUserReserved:input_type -> core.organization_iam.ListOrganizationUserReservedRequest
	14, // 14: core.organization_iam.OrganizationIAMService.PutOrganizationUserReserved:input_type -> core.organization_iam.PutOrganizationUserReservedRequest
	15, // 15: core.organization_iam.OrganizationIAMService.DeleteOrganizationUserReserved:input_type -> core.organization_iam.DeleteOrganizationUserReservedRequest
	16, // 16: core.organization_iam.OrganizationIAMService.ListOrganizationRole:output_type -> core.organization_iam.ListOrganizationRoleResponse
	17, // 17: core.organization_iam.OrganizationIAMService.GetOrganizationRole:output_type -> core.organization_iam.GetOrganizationRoleResponse
	18, // 18: core.organization_iam.OrganizationIAMService.PutOrganizationRole:output_type -> core.organization_iam.PutOrganizationRoleResponse
	19, // 19: core.organization_iam.OrganizationIAMService.DeleteOrganizationRole:output_type -> google.protobuf.Empty
	20, // 20: core.organization_iam.OrganizationIAMService.AttachOrganizationRole:output_type -> core.organization_iam.AttachOrganizationRoleResponse
	19, // 21: core.organization_iam.OrganizationIAMService.DetachOrganizationRole:output_type -> google.protobuf.Empty
	21, // 22: core.organization_iam.OrganizationIAMService.ListOrganizationPolicy:output_type -> core.organization_iam.ListOrganizationPolicyResponse
	22, // 23: core.organization_iam.OrganizationIAMService.GetOrganizationPolicy:output_type -> core.organization_iam.GetOrganizationPolicyResponse
	23, // 24: core.organization_iam.OrganizationIAMService.PutOrganizationPolicy:output_type -> core.organization_iam.PutOrganizationPolicyResponse
	19, // 25: core.organization_iam.OrganizationIAMService.DeleteOrganizationPolicy:output_type -> google.protobuf.Empty
	24, // 26: core.organization_iam.OrganizationIAMService.AttachOrganizationPolicy:output_type -> core.organization_iam.AttachOrganizationPolicyResponse
	19, // 27: core.organization_iam.OrganizationIAMService.DetachOrganizationPolicy:output_type -> google.protobuf.Empty
	25, // 28: core.organization_iam.OrganizationIAMService.IsAuthorizedOrganization:output_type -> core.organization_iam.IsAuthorizedOrganizationResponse
	26, // 29: core.organization_iam.OrganizationIAMService.ListOrganizationUserReserved:output_type -> core.organization_iam.ListOrganizationUserReservedResponse
	27, // 30: core.organization_iam.OrganizationIAMService.PutOrganizationUserReserved:output_type -> core.organization_iam.PutOrganizationUserReservedResponse
	19, // 31: core.organization_iam.OrganizationIAMService.DeleteOrganizationUserReserved:output_type -> google.protobuf.Empty
	16, // [16:32] is the sub-list for method output_type
	0,  // [0:16] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_organization_iam_service_proto_init() }
func file_organization_iam_service_proto_init() {
	if File_organization_iam_service_proto != nil {
		return
	}
	file_organization_iam_role_proto_init()
	file_organization_iam_policy_proto_init()
	file_organization_iam_auth_proto_init()
	file_organization_iam_user_reserved_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_organization_iam_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_organization_iam_service_proto_goTypes,
		DependencyIndexes: file_organization_iam_service_proto_depIdxs,
	}.Build()
	File_organization_iam_service_proto = out.File
	file_organization_iam_service_proto_rawDesc = nil
	file_organization_iam_service_proto_goTypes = nil
	file_organization_iam_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrganizationIAMServiceClient is the client API for OrganizationIAMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrganizationIAMServiceClient interface {
	// Role
	ListOrganizationRole(ctx context.Context, in *ListOrganizationRoleRequest, opts ...grpc.CallOption) (*ListOrganizationRoleResponse, error)
	GetOrganizationRole(ctx context.Context, in *GetOrganizationRoleRequest, opts ...grpc.CallOption) (*GetOrganizationRoleResponse, error)
	PutOrganizationRole(ctx context.Context, in *PutOrganizationRoleRequest, opts ...grpc.CallOption) (*PutOrganizationRoleResponse, error)
	DeleteOrganizationRole(ctx context.Context, in *DeleteOrganizationRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AttachOrganizationRole(ctx context.Context, in *AttachOrganizationRoleRequest, opts ...grpc.CallOption) (*AttachOrganizationRoleResponse, error)
	DetachOrganizationRole(ctx context.Context, in *DetachOrganizationRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Policy
	ListOrganizationPolicy(ctx context.Context, in *ListOrganizationPolicyRequest, opts ...grpc.CallOption) (*ListOrganizationPolicyResponse, error)
	GetOrganizationPolicy(ctx context.Context, in *GetOrganizationPolicyRequest, opts ...grpc.CallOption) (*GetOrganizationPolicyResponse, error)
	PutOrganizationPolicy(ctx context.Context, in *PutOrganizationPolicyRequest, opts ...grpc.CallOption) (*PutOrganizationPolicyResponse, error)
	DeleteOrganizationPolicy(ctx context.Context, in *DeleteOrganizationPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AttachOrganizationPolicy(ctx context.Context, in *AttachOrganizationPolicyRequest, opts ...grpc.CallOption) (*AttachOrganizationPolicyResponse, error)
	DetachOrganizationPolicy(ctx context.Context, in *DetachOrganizationPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Authorization
	IsAuthorizedOrganization(ctx context.Context, in *IsAuthorizedOrganizationRequest, opts ...grpc.CallOption) (*IsAuthorizedOrganizationResponse, error)
	// OrganizationUserReserved
	ListOrganizationUserReserved(ctx context.Context, in *ListOrganizationUserReservedRequest, opts ...grpc.CallOption) (*ListOrganizationUserReservedResponse, error)
	PutOrganizationUserReserved(ctx context.Context, in *PutOrganizationUserReservedRequest, opts ...grpc.CallOption) (*PutOrganizationUserReservedResponse, error)
	DeleteOrganizationUserReserved(ctx context.Context, in *DeleteOrganizationUserReservedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type organizationIAMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationIAMServiceClient(cc grpc.ClientConnInterface) OrganizationIAMServiceClient {
	return &organizationIAMServiceClient{cc}
}

func (c *organizationIAMServiceClient) ListOrganizationRole(ctx context.Context, in *ListOrganizationRoleRequest, opts ...grpc.CallOption) (*ListOrganizationRoleResponse, error) {
	out := new(ListOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, "/core.organization_iam.OrganizationIAMService/ListOrganizationRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationIAMServiceClient) GetOrganizationRole(ctx context.Context, in *GetOrganizationRoleRequest, opts ...grpc.CallOption) (*GetOrganizationRoleResponse, error) {
	out := new(GetOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, "/core.organization_iam.OrganizationIAMService/GetOrganizationRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationIAMServiceClient) PutOrganizationRole(ctx context.Context, in *PutOrganizationRoleRequest, opts ...grpc.CallOption) (*PutOrganizationRoleResponse, error) {
	out := new(PutOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, "/core.organization_iam.OrganizationIAMService/PutOrganizationRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationIAMServiceClient) DeleteOrganizationRole(ctx context.Context, in *DeleteOrganizationRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.organization_iam.OrganizationIAMService/DeleteOrganizationRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationIAMServiceClient) AttachOrganizationRole(ctx context.Context, in *AttachOrganizationRoleRequest, opts ...grpc.CallOption) (*AttachOrganizationRoleResponse, error) {
	out := new(AttachOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, "/core.organization_iam.OrganizationIAMService/AttachOrganizationRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationIAMServiceClient) DetachOrganizationRole(ctx context.Context, in *DetachOrganizationRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.organization_iam.OrganizationIAMService/DetachOrganizationRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationIAMServiceClient) ListOrganizationPolicy(ctx context.Context, in *ListOrganizationPolicyRequest, opts ...grpc.CallOption) (*ListOrganizationPolicyResponse, error) {
	out := new(ListOrganizationPolicyResponse)
	err := c.cc.Invoke(ctx, "/core.organization_iam.OrganizationIAMService/ListOrganizationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationIAMServiceClient) GetOrganizationPolicy(ctx context.Context, in *GetOrganizationPolicyRequest, opts ...grpc.CallOption) (*GetOrganizationPolicyResponse, error) {
	out := new(GetOrganizationPolicyResponse)
	err := c.cc.Invoke(ctx, "/core.organization_iam.OrganizationIAMService/GetOrganizationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationIAMServiceClient) PutOrganizationPolicy(ctx context.Context, in *PutOrganizationPolicyRequest, opts ...grpc.CallOption) (*PutOrganizationPolicyResponse, error) {
	out := new(PutOrganizationPolicyResponse)
	err := c.cc.Invoke(ctx, "/core.organization_iam.OrganizationIAMService/PutOrganizationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationIAMServiceClient) DeleteOrganizationPolicy(ctx context.Context, in *DeleteOrganizationPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.organization_iam.OrganizationIAMService/DeleteOrganizationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationIAMServiceClient) AttachOrganizationPolicy(ctx context.Context, in *AttachOrganizationPolicyRequest, opts ...grpc.CallOption) (*AttachOrganizationPolicyResponse, error) {
	out := new(AttachOrganizationPolicyResponse)
	err := c.cc.Invoke(ctx, "/core.organization_iam.OrganizationIAMService/AttachOrganizationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationIAMServiceClient) DetachOrganizationPolicy(ctx context.Context, in *DetachOrganizationPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.organization_iam.OrganizationIAMService/DetachOrganizationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationIAMServiceClient) IsAuthorizedOrganization(ctx context.Context, in *IsAuthorizedOrganizationRequest, opts ...grpc.CallOption) (*IsAuthorizedOrganizationResponse, error) {
	out := new(IsAuthorizedOrganizationResponse)
	err := c.cc.Invoke(ctx, "/core.organization_iam.OrganizationIAMService/IsAuthorizedOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationIAMServiceClient) ListOrganizationUserReserved(ctx context.Context, in *ListOrganizationUserReservedRequest, opts ...grpc.CallOption) (*ListOrganizationUserReservedResponse, error) {
	out := new(ListOrganizationUserReservedResponse)
	err := c.cc.Invoke(ctx, "/core.organization_iam.OrganizationIAMService/ListOrganizationUserReserved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationIAMServiceClient) PutOrganizationUserReserved(ctx context.Context, in *PutOrganizationUserReservedRequest, opts ...grpc.CallOption) (*PutOrganizationUserReservedResponse, error) {
	out := new(PutOrganizationUserReservedResponse)
	err := c.cc.Invoke(ctx, "/core.organization_iam.OrganizationIAMService/PutOrganizationUserReserved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationIAMServiceClient) DeleteOrganizationUserReserved(ctx context.Context, in *DeleteOrganizationUserReservedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/core.organization_iam.OrganizationIAMService/DeleteOrganizationUserReserved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationIAMServiceServer is the server API for OrganizationIAMService service.
type OrganizationIAMServiceServer interface {
	// Role
	ListOrganizationRole(context.Context, *ListOrganizationRoleRequest) (*ListOrganizationRoleResponse, error)
	GetOrganizationRole(context.Context, *GetOrganizationRoleRequest) (*GetOrganizationRoleResponse, error)
	PutOrganizationRole(context.Context, *PutOrganizationRoleRequest) (*PutOrganizationRoleResponse, error)
	DeleteOrganizationRole(context.Context, *DeleteOrganizationRoleRequest) (*emptypb.Empty, error)
	AttachOrganizationRole(context.Context, *AttachOrganizationRoleRequest) (*AttachOrganizationRoleResponse, error)
	DetachOrganizationRole(context.Context, *DetachOrganizationRoleRequest) (*emptypb.Empty, error)
	// Policy
	ListOrganizationPolicy(context.Context, *ListOrganizationPolicyRequest) (*ListOrganizationPolicyResponse, error)
	GetOrganizationPolicy(context.Context, *GetOrganizationPolicyRequest) (*GetOrganizationPolicyResponse, error)
	PutOrganizationPolicy(context.Context, *PutOrganizationPolicyRequest) (*PutOrganizationPolicyResponse, error)
	DeleteOrganizationPolicy(context.Context, *DeleteOrganizationPolicyRequest) (*emptypb.Empty, error)
	AttachOrganizationPolicy(context.Context, *AttachOrganizationPolicyRequest) (*AttachOrganizationPolicyResponse, error)
	DetachOrganizationPolicy(context.Context, *DetachOrganizationPolicyRequest) (*emptypb.Empty, error)
	// Authorization
	IsAuthorizedOrganization(context.Context, *IsAuthorizedOrganizationRequest) (*IsAuthorizedOrganizationResponse, error)
	// OrganizationUserReserved
	ListOrganizationUserReserved(context.Context, *ListOrganizationUserReservedRequest) (*ListOrganizationUserReservedResponse, error)
	PutOrganizationUserReserved(context.Context, *PutOrganizationUserReservedRequest) (*PutOrganizationUserReservedResponse, error)
	DeleteOrganizationUserReserved(context.Context, *DeleteOrganizationUserReservedRequest) (*emptypb.Empty, error)
}

// UnimplementedOrganizationIAMServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrganizationIAMServiceServer struct {
}

func (*UnimplementedOrganizationIAMServiceServer) ListOrganizationRole(context.Context, *ListOrganizationRoleRequest) (*ListOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationRole not implemented")
}
func (*UnimplementedOrganizationIAMServiceServer) GetOrganizationRole(context.Context, *GetOrganizationRoleRequest) (*GetOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationRole not implemented")
}
func (*UnimplementedOrganizationIAMServiceServer) PutOrganizationRole(context.Context, *PutOrganizationRoleRequest) (*PutOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOrganizationRole not implemented")
}
func (*UnimplementedOrganizationIAMServiceServer) DeleteOrganizationRole(context.Context, *DeleteOrganizationRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationRole not implemented")
}
func (*UnimplementedOrganizationIAMServiceServer) AttachOrganizationRole(context.Context, *AttachOrganizationRoleRequest) (*AttachOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachOrganizationRole not implemented")
}
func (*UnimplementedOrganizationIAMServiceServer) DetachOrganizationRole(context.Context, *DetachOrganizationRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachOrganizationRole not implemented")
}
func (*UnimplementedOrganizationIAMServiceServer) ListOrganizationPolicy(context.Context, *ListOrganizationPolicyRequest) (*ListOrganizationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationPolicy not implemented")
}
func (*UnimplementedOrganizationIAMServiceServer) GetOrganizationPolicy(context.Context, *GetOrganizationPolicyRequest) (*GetOrganizationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationPolicy not implemented")
}
func (*UnimplementedOrganizationIAMServiceServer) PutOrganizationPolicy(context.Context, *PutOrganizationPolicyRequest) (*PutOrganizationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOrganizationPolicy not implemented")
}
func (*UnimplementedOrganizationIAMServiceServer) DeleteOrganizationPolicy(context.Context, *DeleteOrganizationPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationPolicy not implemented")
}
func (*UnimplementedOrganizationIAMServiceServer) AttachOrganizationPolicy(context.Context, *AttachOrganizationPolicyRequest) (*AttachOrganizationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachOrganizationPolicy not implemented")
}
func (*UnimplementedOrganizationIAMServiceServer) DetachOrganizationPolicy(context.Context, *DetachOrganizationPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachOrganizationPolicy not implemented")
}
func (*UnimplementedOrganizationIAMServiceServer) IsAuthorizedOrganization(context.Context, *IsAuthorizedOrganizationRequest) (*IsAuthorizedOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthorizedOrganization not implemented")
}
func (*UnimplementedOrganizationIAMServiceServer) ListOrganizationUserReserved(context.Context, *ListOrganizationUserReservedRequest) (*ListOrganizationUserReservedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationUserReserved not implemented")
}
func (*UnimplementedOrganizationIAMServiceServer) PutOrganizationUserReserved(context.Context, *PutOrganizationUserReservedRequest) (*PutOrganizationUserReservedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOrganizationUserReserved not implemented")
}
func (*UnimplementedOrganizationIAMServiceServer) DeleteOrganizationUserReserved(context.Context, *DeleteOrganizationUserReservedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationUserReserved not implemented")
}

func RegisterOrganizationIAMServiceServer(s *grpc.Server, srv OrganizationIAMServiceServer) {
	s.RegisterService(&_OrganizationIAMService_serviceDesc, srv)
}

func _OrganizationIAMService_ListOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationIAMServiceServer).ListOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.organization_iam.OrganizationIAMService/ListOrganizationRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationIAMServiceServer).ListOrganizationRole(ctx, req.(*ListOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationIAMService_GetOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationIAMServiceServer).GetOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.organization_iam.OrganizationIAMService/GetOrganizationRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationIAMServiceServer).GetOrganizationRole(ctx, req.(*GetOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationIAMService_PutOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationIAMServiceServer).PutOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.organization_iam.OrganizationIAMService/PutOrganizationRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationIAMServiceServer).PutOrganizationRole(ctx, req.(*PutOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationIAMService_DeleteOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationIAMServiceServer).DeleteOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.organization_iam.OrganizationIAMService/DeleteOrganizationRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationIAMServiceServer).DeleteOrganizationRole(ctx, req.(*DeleteOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationIAMService_AttachOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationIAMServiceServer).AttachOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.organization_iam.OrganizationIAMService/AttachOrganizationRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationIAMServiceServer).AttachOrganizationRole(ctx, req.(*AttachOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationIAMService_DetachOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationIAMServiceServer).DetachOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.organization_iam.OrganizationIAMService/DetachOrganizationRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationIAMServiceServer).DetachOrganizationRole(ctx, req.(*DetachOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationIAMService_ListOrganizationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationIAMServiceServer).ListOrganizationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.organization_iam.OrganizationIAMService/ListOrganizationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationIAMServiceServer).ListOrganizationPolicy(ctx, req.(*ListOrganizationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationIAMService_GetOrganizationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationIAMServiceServer).GetOrganizationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.organization_iam.OrganizationIAMService/GetOrganizationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationIAMServiceServer).GetOrganizationPolicy(ctx, req.(*GetOrganizationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationIAMService_PutOrganizationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutOrganizationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationIAMServiceServer).PutOrganizationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.organization_iam.OrganizationIAMService/PutOrganizationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationIAMServiceServer).PutOrganizationPolicy(ctx, req.(*PutOrganizationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationIAMService_DeleteOrganizationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationIAMServiceServer).DeleteOrganizationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.organization_iam.OrganizationIAMService/DeleteOrganizationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationIAMServiceServer).DeleteOrganizationPolicy(ctx, req.(*DeleteOrganizationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationIAMService_AttachOrganizationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachOrganizationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationIAMServiceServer).AttachOrganizationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.organization_iam.OrganizationIAMService/AttachOrganizationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationIAMServiceServer).AttachOrganizationPolicy(ctx, req.(*AttachOrganizationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationIAMService_DetachOrganizationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachOrganizationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationIAMServiceServer).DetachOrganizationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.organization_iam.OrganizationIAMService/DetachOrganizationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationIAMServiceServer).DetachOrganizationPolicy(ctx, req.(*DetachOrganizationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationIAMService_IsAuthorizedOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAuthorizedOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationIAMServiceServer).IsAuthorizedOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.organization_iam.OrganizationIAMService/IsAuthorizedOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationIAMServiceServer).IsAuthorizedOrganization(ctx, req.(*IsAuthorizedOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationIAMService_ListOrganizationUserReserved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationUserReservedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationIAMServiceServer).ListOrganizationUserReserved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.organization_iam.OrganizationIAMService/ListOrganizationUserReserved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationIAMServiceServer).ListOrganizationUserReserved(ctx, req.(*ListOrganizationUserReservedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationIAMService_PutOrganizationUserReserved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutOrganizationUserReservedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationIAMServiceServer).PutOrganizationUserReserved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.organization_iam.OrganizationIAMService/PutOrganizationUserReserved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationIAMServiceServer).PutOrganizationUserReserved(ctx, req.(*PutOrganizationUserReservedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationIAMService_DeleteOrganizationUserReserved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationUserReservedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationIAMServiceServer).DeleteOrganizationUserReserved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.organization_iam.OrganizationIAMService/DeleteOrganizationUserReserved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationIAMServiceServer).DeleteOrganizationUserReserved(ctx, req.(*DeleteOrganizationUserReservedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrganizationIAMService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.organization_iam.OrganizationIAMService",
	HandlerType: (*OrganizationIAMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrganizationRole",
			Handler:    _OrganizationIAMService_ListOrganizationRole_Handler,
		},
		{
			MethodName: "GetOrganizationRole",
			Handler:    _OrganizationIAMService_GetOrganizationRole_Handler,
		},
		{
			MethodName: "PutOrganizationRole",
			Handler:    _OrganizationIAMService_PutOrganizationRole_Handler,
		},
		{
			MethodName: "DeleteOrganizationRole",
			Handler:    _OrganizationIAMService_DeleteOrganizationRole_Handler,
		},
		{
			MethodName: "AttachOrganizationRole",
			Handler:    _OrganizationIAMService_AttachOrganizationRole_Handler,
		},
		{
			MethodName: "DetachOrganizationRole",
			Handler:    _OrganizationIAMService_DetachOrganizationRole_Handler,
		},
		{
			MethodName: "ListOrganizationPolicy",
			Handler:    _OrganizationIAMService_ListOrganizationPolicy_Handler,
		},
		{
			MethodName: "GetOrganizationPolicy",
			Handler:    _OrganizationIAMService_GetOrganizationPolicy_Handler,
		},
		{
			MethodName: "PutOrganizationPolicy",
			Handler:    _OrganizationIAMService_PutOrganizationPolicy_Handler,
		},
		{
			MethodName: "DeleteOrganizationPolicy",
			Handler:    _OrganizationIAMService_DeleteOrganizationPolicy_Handler,
		},
		{
			MethodName: "AttachOrganizationPolicy",
			Handler:    _OrganizationIAMService_AttachOrganizationPolicy_Handler,
		},
		{
			MethodName: "DetachOrganizationPolicy",
			Handler:    _OrganizationIAMService_DetachOrganizationPolicy_Handler,
		},
		{
			MethodName: "IsAuthorizedOrganization",
			Handler:    _OrganizationIAMService_IsAuthorizedOrganization_Handler,
		},
		{
			MethodName: "ListOrganizationUserReserved",
			Handler:    _OrganizationIAMService_ListOrganizationUserReserved_Handler,
		},
		{
			MethodName: "PutOrganizationUserReserved",
			Handler:    _OrganizationIAMService_PutOrganizationUserReserved_Handler,
		},
		{
			MethodName: "DeleteOrganizationUserReserved",
			Handler:    _OrganizationIAMService_DeleteOrganizationUserReserved_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organization_iam/service.proto",
}
