// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: organization_iam/user_reserved.proto

package organization_iam

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListOrganizationUserReservedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationUserReservedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationUserReservedRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationUserReservedRequestMultiError, or nil if none found.
func (m *ListOrganizationUserReservedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationUserReservedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrganizationId() <= 0 {
		err := ListOrganizationUserReservedRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserIdpKey()) > 255 {
		err := ListOrganizationUserReservedRequestValidationError{
			field:  "UserIdpKey",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListOrganizationUserReservedRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationUserReservedRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationUserReservedRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationUserReservedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationUserReservedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationUserReservedRequestMultiError) AllErrors() []error { return m }

// ListOrganizationUserReservedRequestValidationError is the validation error
// returned by ListOrganizationUserReservedRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationUserReservedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationUserReservedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationUserReservedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationUserReservedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationUserReservedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationUserReservedRequestValidationError) ErrorName() string {
	return "ListOrganizationUserReservedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationUserReservedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationUserReservedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationUserReservedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationUserReservedRequestValidationError{}

// Validate checks the field values on ListOrganizationUserReservedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOrganizationUserReservedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationUserReservedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationUserReservedResponseMultiError, or nil if none found.
func (m *ListOrganizationUserReservedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationUserReservedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserReserved() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationUserReservedResponseValidationError{
						field:  fmt.Sprintf("UserReserved[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationUserReservedResponseValidationError{
						field:  fmt.Sprintf("UserReserved[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationUserReservedResponseValidationError{
					field:  fmt.Sprintf("UserReserved[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationUserReservedResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationUserReservedResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationUserReservedResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationUserReservedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationUserReservedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationUserReservedResponseMultiError) AllErrors() []error { return m }

// ListOrganizationUserReservedResponseValidationError is the validation error
// returned by ListOrganizationUserReservedResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationUserReservedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationUserReservedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationUserReservedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationUserReservedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationUserReservedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationUserReservedResponseValidationError) ErrorName() string {
	return "ListOrganizationUserReservedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationUserReservedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationUserReservedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationUserReservedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationUserReservedResponseValidationError{}

// Validate checks the field values on PutOrganizationUserReservedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PutOrganizationUserReservedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutOrganizationUserReservedRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PutOrganizationUserReservedRequestMultiError, or nil if none found.
func (m *PutOrganizationUserReservedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutOrganizationUserReservedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for ReservedId

	if utf8.RuneCountInString(m.GetUserIdpKey()) > 255 {
		err := PutOrganizationUserReservedRequestValidationError{
			field:  "UserIdpKey",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRoleId() <= 0 {
		err := PutOrganizationUserReservedRequestValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PutOrganizationUserReservedRequestMultiError(errors)
	}

	return nil
}

// PutOrganizationUserReservedRequestMultiError is an error wrapping multiple
// validation errors returned by
// PutOrganizationUserReservedRequest.ValidateAll() if the designated
// constraints aren't met.
type PutOrganizationUserReservedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutOrganizationUserReservedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutOrganizationUserReservedRequestMultiError) AllErrors() []error { return m }

// PutOrganizationUserReservedRequestValidationError is the validation error
// returned by PutOrganizationUserReservedRequest.Validate if the designated
// constraints aren't met.
type PutOrganizationUserReservedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutOrganizationUserReservedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutOrganizationUserReservedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutOrganizationUserReservedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutOrganizationUserReservedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutOrganizationUserReservedRequestValidationError) ErrorName() string {
	return "PutOrganizationUserReservedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutOrganizationUserReservedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutOrganizationUserReservedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutOrganizationUserReservedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutOrganizationUserReservedRequestValidationError{}

// Validate checks the field values on PutOrganizationUserReservedResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PutOrganizationUserReservedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutOrganizationUserReservedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PutOrganizationUserReservedResponseMultiError, or nil if none found.
func (m *PutOrganizationUserReservedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutOrganizationUserReservedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserReserved()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PutOrganizationUserReservedResponseValidationError{
					field:  "UserReserved",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PutOrganizationUserReservedResponseValidationError{
					field:  "UserReserved",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserReserved()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutOrganizationUserReservedResponseValidationError{
				field:  "UserReserved",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PutOrganizationUserReservedResponseMultiError(errors)
	}

	return nil
}

// PutOrganizationUserReservedResponseMultiError is an error wrapping multiple
// validation errors returned by
// PutOrganizationUserReservedResponse.ValidateAll() if the designated
// constraints aren't met.
type PutOrganizationUserReservedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutOrganizationUserReservedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutOrganizationUserReservedResponseMultiError) AllErrors() []error { return m }

// PutOrganizationUserReservedResponseValidationError is the validation error
// returned by PutOrganizationUserReservedResponse.Validate if the designated
// constraints aren't met.
type PutOrganizationUserReservedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutOrganizationUserReservedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutOrganizationUserReservedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutOrganizationUserReservedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutOrganizationUserReservedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutOrganizationUserReservedResponseValidationError) ErrorName() string {
	return "PutOrganizationUserReservedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutOrganizationUserReservedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutOrganizationUserReservedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutOrganizationUserReservedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutOrganizationUserReservedResponseValidationError{}

// Validate checks the field values on DeleteOrganizationUserReservedRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteOrganizationUserReservedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationUserReservedRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationUserReservedRequestMultiError, or nil if none found.
func (m *DeleteOrganizationUserReservedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationUserReservedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrganizationId() <= 0 {
		err := DeleteOrganizationUserReservedRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReservedId() <= 0 {
		err := DeleteOrganizationUserReservedRequestValidationError{
			field:  "ReservedId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOrganizationUserReservedRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationUserReservedRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteOrganizationUserReservedRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrganizationUserReservedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationUserReservedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationUserReservedRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationUserReservedRequestValidationError is the validation error
// returned by DeleteOrganizationUserReservedRequest.Validate if the
// designated constraints aren't met.
type DeleteOrganizationUserReservedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationUserReservedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationUserReservedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationUserReservedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationUserReservedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationUserReservedRequestValidationError) ErrorName() string {
	return "DeleteOrganizationUserReservedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationUserReservedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationUserReservedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationUserReservedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationUserReservedRequestValidationError{}
